
_sensor_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001064  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001124  08001124  00011124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001138  08001138  00011140  2**0
                  CONTENTS
  4 .ARM          00000000  08001138  08001138  00011140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001138  08001140  00011140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001138  08001138  00011138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800113c  0800113c  0001113c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08001140  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001140  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001997  00000000  00000000  000111ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006ed  00000000  00000000  00012b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00013230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017b  00000000  00000000  00013438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000afcd  00000000  00000000  000135b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002539  00000000  00000000  0001e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003da5a  00000000  00000000  00020ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000064c  00000000  00000000  0005e514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0005eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800110c 	.word	0x0800110c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800110c 	.word	0x0800110c

08000108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b083      	sub	sp, #12
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	6039      	str	r1, [r7, #0]
 8000112:	1dfb      	adds	r3, r7, #7
 8000114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000116:	1dfb      	adds	r3, r7, #7
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2b7f      	cmp	r3, #127	; 0x7f
 800011c:	d828      	bhi.n	8000170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800011e:	4a2f      	ldr	r2, [pc, #188]	; (80001dc <__NVIC_SetPriority+0xd4>)
 8000120:	1dfb      	adds	r3, r7, #7
 8000122:	781b      	ldrb	r3, [r3, #0]
 8000124:	b25b      	sxtb	r3, r3
 8000126:	089b      	lsrs	r3, r3, #2
 8000128:	33c0      	adds	r3, #192	; 0xc0
 800012a:	009b      	lsls	r3, r3, #2
 800012c:	589b      	ldr	r3, [r3, r2]
 800012e:	1dfa      	adds	r2, r7, #7
 8000130:	7812      	ldrb	r2, [r2, #0]
 8000132:	0011      	movs	r1, r2
 8000134:	2203      	movs	r2, #3
 8000136:	400a      	ands	r2, r1
 8000138:	00d2      	lsls	r2, r2, #3
 800013a:	21ff      	movs	r1, #255	; 0xff
 800013c:	4091      	lsls	r1, r2
 800013e:	000a      	movs	r2, r1
 8000140:	43d2      	mvns	r2, r2
 8000142:	401a      	ands	r2, r3
 8000144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000146:	683b      	ldr	r3, [r7, #0]
 8000148:	019b      	lsls	r3, r3, #6
 800014a:	22ff      	movs	r2, #255	; 0xff
 800014c:	401a      	ands	r2, r3
 800014e:	1dfb      	adds	r3, r7, #7
 8000150:	781b      	ldrb	r3, [r3, #0]
 8000152:	0018      	movs	r0, r3
 8000154:	2303      	movs	r3, #3
 8000156:	4003      	ands	r3, r0
 8000158:	00db      	lsls	r3, r3, #3
 800015a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800015c:	481f      	ldr	r0, [pc, #124]	; (80001dc <__NVIC_SetPriority+0xd4>)
 800015e:	1dfb      	adds	r3, r7, #7
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	b25b      	sxtb	r3, r3
 8000164:	089b      	lsrs	r3, r3, #2
 8000166:	430a      	orrs	r2, r1
 8000168:	33c0      	adds	r3, #192	; 0xc0
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800016e:	e031      	b.n	80001d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000170:	4a1b      	ldr	r2, [pc, #108]	; (80001e0 <__NVIC_SetPriority+0xd8>)
 8000172:	1dfb      	adds	r3, r7, #7
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	0019      	movs	r1, r3
 8000178:	230f      	movs	r3, #15
 800017a:	400b      	ands	r3, r1
 800017c:	3b08      	subs	r3, #8
 800017e:	089b      	lsrs	r3, r3, #2
 8000180:	3306      	adds	r3, #6
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	18d3      	adds	r3, r2, r3
 8000186:	3304      	adds	r3, #4
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	1dfa      	adds	r2, r7, #7
 800018c:	7812      	ldrb	r2, [r2, #0]
 800018e:	0011      	movs	r1, r2
 8000190:	2203      	movs	r2, #3
 8000192:	400a      	ands	r2, r1
 8000194:	00d2      	lsls	r2, r2, #3
 8000196:	21ff      	movs	r1, #255	; 0xff
 8000198:	4091      	lsls	r1, r2
 800019a:	000a      	movs	r2, r1
 800019c:	43d2      	mvns	r2, r2
 800019e:	401a      	ands	r2, r3
 80001a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	019b      	lsls	r3, r3, #6
 80001a6:	22ff      	movs	r2, #255	; 0xff
 80001a8:	401a      	ands	r2, r3
 80001aa:	1dfb      	adds	r3, r7, #7
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	0018      	movs	r0, r3
 80001b0:	2303      	movs	r3, #3
 80001b2:	4003      	ands	r3, r0
 80001b4:	00db      	lsls	r3, r3, #3
 80001b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <__NVIC_SetPriority+0xd8>)
 80001ba:	1dfb      	adds	r3, r7, #7
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	001c      	movs	r4, r3
 80001c0:	230f      	movs	r3, #15
 80001c2:	4023      	ands	r3, r4
 80001c4:	3b08      	subs	r3, #8
 80001c6:	089b      	lsrs	r3, r3, #2
 80001c8:	430a      	orrs	r2, r1
 80001ca:	3306      	adds	r3, #6
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	18c3      	adds	r3, r0, r3
 80001d0:	3304      	adds	r3, #4
 80001d2:	601a      	str	r2, [r3, #0]
}
 80001d4:	46c0      	nop			; (mov r8, r8)
 80001d6:	46bd      	mov	sp, r7
 80001d8:	b003      	add	sp, #12
 80001da:	bd90      	pop	{r4, r7, pc}
 80001dc:	e000e100 	.word	0xe000e100
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001ee:	6959      	ldr	r1, [r3, #20]
 80001f0:	4b06      	ldr	r3, [pc, #24]	; (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	430a      	orrs	r2, r1
 80001f6:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4013      	ands	r3, r2
 8000200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000202:	68fb      	ldr	r3, [r7, #12]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b004      	add	sp, #16
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40021000 	.word	0x40021000

08000210 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 800021a:	69d9      	ldr	r1, [r3, #28]
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	430a      	orrs	r2, r1
 8000222:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 8000226:	69db      	ldr	r3, [r3, #28]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4013      	ands	r3, r2
 800022c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800022e:	68fb      	ldr	r3, [r7, #12]
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	b004      	add	sp, #16
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000

0800023c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 8000246:	6999      	ldr	r1, [r3, #24]
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	430a      	orrs	r2, r1
 800024e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4013      	ands	r3, r2
 8000258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800025a:	68fb      	ldr	r3, [r7, #12]
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b004      	add	sp, #16
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000

08000268 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	683a      	ldr	r2, [r7, #0]
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t direction=0;
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ffd5 	bl	800023c <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000292:	2380      	movs	r3, #128	; 0x80
 8000294:	055b      	lsls	r3, r3, #21
 8000296:	0018      	movs	r0, r3
 8000298:	f7ff ffba 	bl	8000210 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 800029c:	2301      	movs	r3, #1
 800029e:	425b      	negs	r3, r3
 80002a0:	2103      	movs	r1, #3
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ff30 	bl	8000108 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f834 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 f9e0 	bl	8000670 <MX_GPIO_Init>
  MX_ADC_Init();
 80002b0:	f000 f84a 	bl	8000348 <MX_ADC_Init>
  MX_I2C1_Init();
 80002b4:	f000 f878 	bl	80003a8 <MX_I2C1_Init>
  MX_TIM14_Init();
 80002b8:	f000 f916 	bl	80004e8 <MX_TIM14_Init>
 MX_TIM16_Init();
 80002bc:	f000 f948 	bl	8000550 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80002c0:	f000 f980 	bl	80005c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM14->CR1 |= TIM_CR1_CEN; // Start timer
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <main+0x8c>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <main+0x8c>)
 80002ca:	2101      	movs	r1, #1
 80002cc:	430a      	orrs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

      while (1)
      {
          // Step 1: Read sensors
          if (CROSS>=1){
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <main+0x90>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d005      	beq.n	80002e4 <main+0x64>
         	 makeTurn(4);
 80002d8:	2004      	movs	r0, #4
 80002da:	f000 fb37 	bl	800094c <makeTurn>
         	 CROSS=0;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <main+0x90>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
          }

          read_sensors();
 80002e4:	f000 fc12 	bl	8000b0c <read_sensors>

          direction=line_process() ;
 80002e8:	1dfc      	adds	r4, r7, #7
 80002ea:	f000 fc4f 	bl	8000b8c <line_process>
 80002ee:	0003      	movs	r3, r0
 80002f0:	7023      	strb	r3, [r4, #0]
           // Array of bytes to send via I2C
          //go( times , direction, duration)
          SendSingleValue(0x08, 128, direction);
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	001a      	movs	r2, r3
 80002fa:	2180      	movs	r1, #128	; 0x80
 80002fc:	2008      	movs	r0, #8
 80002fe:	f000 fd51 	bl	8000da4 <SendSingleValue>



          DelayWithTimer(15); // Delay before the next cycle
 8000302:	200f      	movs	r0, #15
 8000304:	f000 fb0e 	bl	8000924 <DelayWithTimer>
          if (CROSS>=1){
 8000308:	e7e2      	b.n	80002d0 <main+0x50>
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	40002000 	.word	0x40002000
 8000310:	20000025 	.word	0x20000025

08000314 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)

{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;                      // Enable HSI
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <SystemClock_Config+0x30>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <SystemClock_Config+0x30>)
 800031e:	2101      	movs	r1, #1
 8000320:	430a      	orrs	r2, r1
 8000322:	601a      	str	r2, [r3, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));           // Wait until HSI is ready
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <SystemClock_Config+0x30>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2202      	movs	r2, #2
 800032c:	4013      	ands	r3, r2
 800032e:	d0fa      	beq.n	8000326 <SystemClock_Config+0x12>

    RCC->CFGR = RCC_CFGR_SW_HSI;                  // Select HSI as system clock
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <SystemClock_Config+0x30>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 |             // AHB prescaler
 8000336:	4a03      	ldr	r2, [pc, #12]	; (8000344 <SystemClock_Config+0x30>)
 8000338:	4b02      	ldr	r3, [pc, #8]	; (8000344 <SystemClock_Config+0x30>)
 800033a:	6852      	ldr	r2, [r2, #4]
 800033c:	605a      	str	r2, [r3, #4]
                 RCC_CFGR_PPRE_DIV1;              // APB1 prescaler
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000

08000348 <MX_ADC_Init>:
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)

{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;           // Enable ADC1 clock
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_ADC_Init+0x58>)
 800034e:	699a      	ldr	r2, [r3, #24]
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_ADC_Init+0x58>)
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	0089      	lsls	r1, r1, #2
 8000356:	430a      	orrs	r2, r1
 8000358:	619a      	str	r2, [r3, #24]
    ADC1->CR = 0;                                 // Reset control register
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_ADC_Init+0x5c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
    ADC1->CFGR1 = 0;                              // Reset configuration register
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_ADC_Init+0x5c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

    // Set resolution to 12-bit (reset state, no action needed as 12-bit is default)
    // Configure sampling time to 1.5 cycles
    ADC1->SMPR = 0x0;                             // Set sampling time to 1.5 ADC clock cycles (default)
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_ADC_Init+0x5c>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]

    ADC1->CHSELR = ADC_CHSELR_CHSEL0;             // Select channel 0
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_ADC_Init+0x5c>)
 800036e:	2201      	movs	r2, #1
 8000370:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;              // Right data alignment (default)
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_ADC_Init+0x5c>)
 8000374:	68da      	ldr	r2, [r3, #12]
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_ADC_Init+0x5c>)
 8000378:	2120      	movs	r1, #32
 800037a:	438a      	bics	r2, r1
 800037c:	60da      	str	r2, [r3, #12]

    ADC1->CR |= ADC_CR_ADEN;                      // Enable ADC
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_ADC_Init+0x5c>)
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_ADC_Init+0x5c>)
 8000384:	2101      	movs	r1, #1
 8000386:	430a      	orrs	r2, r1
 8000388:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));         // Wait for ADC to be ready
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_ADC_Init+0x5c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2201      	movs	r2, #1
 8000392:	4013      	ands	r3, r2
 8000394:	d0fa      	beq.n	800038c <MX_ADC_Init+0x44>
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40012400 	.word	0x40012400

080003a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */

    /* USER CODE END I2C1_Init 0 */

    /* Enable clock for GPIOA and I2C1 peripherals */
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  // Enable GPIOA clock
 80003ac:	4b45      	ldr	r3, [pc, #276]	; (80004c4 <MX_I2C1_Init+0x11c>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	4b44      	ldr	r3, [pc, #272]	; (80004c4 <MX_I2C1_Init+0x11c>)
 80003b2:	2180      	movs	r1, #128	; 0x80
 80003b4:	0289      	lsls	r1, r1, #10
 80003b6:	430a      	orrs	r2, r1
 80003b8:	615a      	str	r2, [r3, #20]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // Enable I2C1 clock
 80003ba:	4b42      	ldr	r3, [pc, #264]	; (80004c4 <MX_I2C1_Init+0x11c>)
 80003bc:	69da      	ldr	r2, [r3, #28]
 80003be:	4b41      	ldr	r3, [pc, #260]	; (80004c4 <MX_I2C1_Init+0x11c>)
 80003c0:	2180      	movs	r1, #128	; 0x80
 80003c2:	0389      	lsls	r1, r1, #14
 80003c4:	430a      	orrs	r2, r1
 80003c6:	61da      	str	r2, [r3, #28]

    /* Configure GPIOA for I2C1_SCL (PA9) and I2C1_SDA (PA10) */
    GPIOA->MODER &= ~((3U << (2 * 9)) | (3U << (2 * 10)));  // Clear mode bits for PA9 and PA10
 80003c8:	2390      	movs	r3, #144	; 0x90
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	2390      	movs	r3, #144	; 0x90
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	493d      	ldr	r1, [pc, #244]	; (80004c8 <MX_I2C1_Init+0x120>)
 80003d4:	400a      	ands	r2, r1
 80003d6:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= ((2U << (2 * 9)) | (2U << (2 * 10)));   // Set mode to Alternate Function
 80003d8:	2390      	movs	r3, #144	; 0x90
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	21a0      	movs	r1, #160	; 0xa0
 80003e4:	0389      	lsls	r1, r1, #14
 80003e6:	430a      	orrs	r2, r1
 80003e8:	601a      	str	r2, [r3, #0]

    GPIOA->OTYPER |= (1U << 9) | (1U << 10);  // Set output type to Open-Drain for PA9 and PA10
 80003ea:	2390      	movs	r3, #144	; 0x90
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	685a      	ldr	r2, [r3, #4]
 80003f0:	2390      	movs	r3, #144	; 0x90
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	21c0      	movs	r1, #192	; 0xc0
 80003f6:	00c9      	lsls	r1, r1, #3
 80003f8:	430a      	orrs	r2, r1
 80003fa:	605a      	str	r2, [r3, #4]

    GPIOA->OSPEEDR |= ((3U << (2 * 9)) | (3U << (2 * 10))); // Set speed to High for PA9 and PA10
 80003fc:	2390      	movs	r3, #144	; 0x90
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	689a      	ldr	r2, [r3, #8]
 8000402:	2390      	movs	r3, #144	; 0x90
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	21f0      	movs	r1, #240	; 0xf0
 8000408:	0389      	lsls	r1, r1, #14
 800040a:	430a      	orrs	r2, r1
 800040c:	609a      	str	r2, [r3, #8]

    GPIOA->PUPDR &= ~((3U << (2 * 9)) | (3U << (2 * 10)));  // No pull-up, no pull-down for PA9 and PA10
 800040e:	2390      	movs	r3, #144	; 0x90
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	68da      	ldr	r2, [r3, #12]
 8000414:	2390      	movs	r3, #144	; 0x90
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	492b      	ldr	r1, [pc, #172]	; (80004c8 <MX_I2C1_Init+0x120>)
 800041a:	400a      	ands	r2, r1
 800041c:	60da      	str	r2, [r3, #12]

    GPIOA->AFR[1] &= ~((0xFU << (4 * (9 - 8))) | (0xFU << (4 * (10 - 8))));  // Clear alternate function bits
 800041e:	2390      	movs	r3, #144	; 0x90
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000424:	2390      	movs	r3, #144	; 0x90
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	4928      	ldr	r1, [pc, #160]	; (80004cc <MX_I2C1_Init+0x124>)
 800042a:	400a      	ands	r2, r1
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOA->AFR[1] |= ((4U << (4 * (9 - 8))) | (4U << (4 * (10 - 8))));       // Set AF4 (I2C1) for PA9 and PA10
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000434:	2390      	movs	r3, #144	; 0x90
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	2188      	movs	r1, #136	; 0x88
 800043a:	00c9      	lsls	r1, r1, #3
 800043c:	430a      	orrs	r2, r1
 800043e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Configure I2C1 */
    I2C1->CR1 &= ~I2C_CR1_PE;  // Disable I2C1 to configure it
 8000440:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000446:	2101      	movs	r1, #1
 8000448:	438a      	bics	r2, r1
 800044a:	601a      	str	r2, [r3, #0]

    I2C1->TIMINGR = 0x2000090E; // Configure timing for 100 kHz (assuming HSI clock at 8 MHz)
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <MX_I2C1_Init+0x128>)
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <MX_I2C1_Init+0x12c>)
 8000450:	611a      	str	r2, [r3, #16]

    I2C1->CR1 &= ~I2C_CR1_NOSTRETCH; // Enable clock stretching
 8000452:	4b1f      	ldr	r3, [pc, #124]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000458:	491f      	ldr	r1, [pc, #124]	; (80004d8 <MX_I2C1_Init+0x130>)
 800045a:	400a      	ands	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_GCEN;      // Disable general call mode
 800045e:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000464:	491d      	ldr	r1, [pc, #116]	; (80004dc <MX_I2C1_Init+0x134>)
 8000466:	400a      	ands	r2, r1
 8000468:	601a      	str	r2, [r3, #0]

    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;   // Disable own address 1
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MX_I2C1_Init+0x128>)
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000470:	491b      	ldr	r1, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x138>)
 8000472:	400a      	ands	r2, r1
 8000474:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 = (0 << 1) | I2C_OAR1_OA1MODE; // Configure own address 1 to 7-bit mode and set address to 0x00
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	00d2      	lsls	r2, r2, #3
 800047c:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 |= I2C_OAR1_OA1EN;    // Enable own address 1
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000480:	689a      	ldr	r2, [r3, #8]
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0209      	lsls	r1, r1, #8
 8000488:	430a      	orrs	r2, r1
 800048a:	609a      	str	r2, [r3, #8]

    I2C1->OAR2 &= ~I2C_OAR2_OA2EN;   // Disable own address 2
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_I2C1_Init+0x128>)
 800048e:	68da      	ldr	r2, [r3, #12]
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_I2C1_Init+0x128>)
 8000492:	4913      	ldr	r1, [pc, #76]	; (80004e0 <MX_I2C1_Init+0x138>)
 8000494:	400a      	ands	r2, r1
 8000496:	60da      	str	r2, [r3, #12]

    I2C1->CR2 &= ~I2C_CR2_ADD10;     // Use 7-bit addressing mode for slave address
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MX_I2C1_Init+0x128>)
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_I2C1_Init+0x128>)
 800049e:	4911      	ldr	r1, [pc, #68]	; (80004e4 <MX_I2C1_Init+0x13c>)
 80004a0:	400a      	ands	r2, r1
 80004a2:	605a      	str	r2, [r3, #4]
    I2C1->CR2 |= I2C_CR2_AUTOEND;    // Enable AUTOEND (automatic STOP condition)
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_I2C1_Init+0x128>)
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_I2C1_Init+0x128>)
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	0489      	lsls	r1, r1, #18
 80004ae:	430a      	orrs	r2, r1
 80004b0:	605a      	str	r2, [r3, #4]

    I2C1->CR1 |= I2C_CR1_PE;         // Enable I2C1 peripheral
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_I2C1_Init+0x128>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_I2C1_Init+0x128>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	ffc3ffff 	.word	0xffc3ffff
 80004cc:	fffff00f 	.word	0xfffff00f
 80004d0:	40005400 	.word	0x40005400
 80004d4:	2000090e 	.word	0x2000090e
 80004d8:	fffdffff 	.word	0xfffdffff
 80004dc:	fff7ffff 	.word	0xfff7ffff
 80004e0:	ffff7fff 	.word	0xffff7fff
 80004e4:	fffff7ff 	.word	0xfffff7ff

080004e8 <MX_TIM14_Init>:
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)

{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    // Enable the clock for TIM14
    RCC->APB1ENR |= RCC_APB1ENR_TIM14EN; // TIM14 clock enable
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_TIM14_Init+0x54>)
 80004ee:	69da      	ldr	r2, [r3, #28]
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_TIM14_Init+0x54>)
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	0049      	lsls	r1, r1, #1
 80004f6:	430a      	orrs	r2, r1
 80004f8:	61da      	str	r2, [r3, #28]

    // Reset TIM14 configuration
    TIM14->CR1 = 0; // Clear control register
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_TIM14_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
    TIM14->CNT = 0; // Reset counter
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_TIM14_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	625a      	str	r2, [r3, #36]	; 0x24

    // Configure Prescaler
    TIM14->PSC = 7999; // Set prescaler for 1 kHz timer clock (assuming 8 MHz system clock)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_TIM14_Init+0x58>)
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <MX_TIM14_Init+0x5c>)
 800050a:	629a      	str	r2, [r3, #40]	; 0x28

    // Configure Counter Mode (Up)
    TIM14->CR1 &= ~TIM_CR1_DIR; // Ensure up-counting mode (DIR = 0)
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_TIM14_Init+0x58>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_TIM14_Init+0x58>)
 8000512:	2110      	movs	r1, #16
 8000514:	438a      	bics	r2, r1
 8000516:	601a      	str	r2, [r3, #0]

    // Configure Period (Auto-Reload Register)
    TIM14->ARR = 999; // Set period for 1 ms increment (1 kHz timer clock)
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_TIM14_Init+0x58>)
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <MX_TIM14_Init+0x60>)
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Set Clock Division (DIV1)
    TIM14->CR1 &= ~TIM_CR1_CKD; // Set clock division to 1 (CKD = 00)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_TIM14_Init+0x58>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_TIM14_Init+0x58>)
 8000524:	4909      	ldr	r1, [pc, #36]	; (800054c <MX_TIM14_Init+0x64>)
 8000526:	400a      	ands	r2, r1
 8000528:	601a      	str	r2, [r3, #0]

    // Enable the Counter
    TIM14->CR1 |= TIM_CR1_CEN; // Start the counter (CEN = 1)
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_TIM14_Init+0x58>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <MX_TIM14_Init+0x58>)
 8000530:	2101      	movs	r1, #1
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	40002000 	.word	0x40002000
 8000544:	00001f3f 	.word	0x00001f3f
 8000548:	000003e7 	.word	0x000003e7
 800054c:	fffffcff 	.word	0xfffffcff

08000550 <MX_TIM16_Init>:



//TIMMER16

static void MX_TIM16_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    // Enable the TIM16 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <MX_TIM16_Init+0x60>)
 8000556:	699a      	ldr	r2, [r3, #24]
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_TIM16_Init+0x60>)
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0289      	lsls	r1, r1, #10
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]

    // Reset TIM16 configuration
    TIM16->CR1 = 0x0000;       // Clear control register
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
    TIM16->CNT = 0x0000;       // Reset counter
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_TIM16_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM16->PSC = 7999;         // Prescaler for 1 ms time base (8 MHz clock / (PSC + 1))
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <MX_TIM16_Init+0x68>)
 8000572:	629a      	str	r2, [r3, #40]	; 0x28
    TIM16->ARR = 5000;         // Auto-reload value for 5000 ms
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <MX_TIM16_Init+0x6c>)
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM16->CR1 |= TIM_CR1_DIR; // Down-counting mode
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_TIM16_Init+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000580:	2110      	movs	r1, #16
 8000582:	430a      	orrs	r2, r1
 8000584:	601a      	str	r2, [r3, #0]
    TIM16->CR1 |= TIM_CR1_OPM; // One-pulse mode (counter stops at 0)
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_TIM16_Init+0x64>)
 800058c:	2108      	movs	r1, #8
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
    TIM16->CR1 &= ~TIM_CR1_CKD; // No clock division
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_TIM16_Init+0x64>)
 8000598:	4909      	ldr	r1, [pc, #36]	; (80005c0 <MX_TIM16_Init+0x70>)
 800059a:	400a      	ands	r2, r1
 800059c:	601a      	str	r2, [r3, #0]

    // Enable the timer (initially stopped)
    TIM16->CR1 &= ~TIM_CR1_CEN;
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MX_TIM16_Init+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <MX_TIM16_Init+0x64>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	438a      	bics	r2, r1
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40014400 	.word	0x40014400
 80005b8:	00001f3f 	.word	0x00001f3f
 80005bc:	00001388 	.word	0x00001388
 80005c0:	fffffcff 	.word	0xfffffcff

080005c4 <MX_USART1_UART_Init>:
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)

{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    // Enable clock for USART1 and GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_USART1_UART_Init+0xa4>)
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_USART1_UART_Init+0xa4>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	01c9      	lsls	r1, r1, #7
 80005d2:	430a      	orrs	r2, r1
 80005d4:	619a      	str	r2, [r3, #24]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_USART1_UART_Init+0xa4>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_USART1_UART_Init+0xa4>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0289      	lsls	r1, r1, #10
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]

    // Configure GPIOA: PA2 (TX) as Alternate Function
    GPIOA->MODER &= ~(3U << (2 * 2));  // Clear MODER for PA2
 80005e4:	2390      	movs	r3, #144	; 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	2390      	movs	r3, #144	; 0x90
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	2130      	movs	r1, #48	; 0x30
 80005f0:	438a      	bics	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (2 * 2));   // Set MODER to Alternate Function
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2120      	movs	r1, #32
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1U << (4 * 2));  // Set AF1 (USART1_TX) for PA2
 8000604:	2390      	movs	r3, #144	; 0x90
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	6a1a      	ldr	r2, [r3, #32]
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0049      	lsls	r1, r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	621a      	str	r2, [r3, #32]

    // Configure GPIOA: PA3 (RX) as Alternate Function
    GPIOA->MODER &= ~(3U << (3 * 2));  // Clear MODER for PA3
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	21c0      	movs	r1, #192	; 0xc0
 8000622:	438a      	bics	r2, r1
 8000624:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (3 * 2));   // Set MODER to Alternate Function
 8000626:	2390      	movs	r3, #144	; 0x90
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	430a      	orrs	r2, r1
 8000634:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1U << (4 * 3));  // Set AF1 (USART1_RX) for PA3
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	6a1a      	ldr	r2, [r3, #32]
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0149      	lsls	r1, r1, #5
 8000644:	430a      	orrs	r2, r1
 8000646:	621a      	str	r2, [r3, #32]

    // Configure USART1: 9600 baud, 8N1 (1 stop bit, no parity)
    USART1->BRR = 8000000 / 38400; // Assuming 48 MHz clock
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART1_UART_Init+0xa8>)
 800064a:	22d0      	movs	r2, #208	; 0xd0
 800064c:	60da      	str	r2, [r3, #12]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE; // Enable Transmitter and Receiver
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_USART1_UART_Init+0xa8>)
 8000650:	220c      	movs	r2, #12
 8000652:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_UE;               // Enable USART
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <MX_USART1_UART_Init+0xa8>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <MX_USART1_UART_Init+0xa8>)
 800065a:	2101      	movs	r1, #1
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40021000 	.word	0x40021000
 800066c:	40013800 	.word	0x40013800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2318      	movs	r3, #24
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f000 fd18 	bl	80010b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	03db      	lsls	r3, r3, #15
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff fdab 	bl	80001e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	029b      	lsls	r3, r3, #10
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fda6 	bl	80001e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(R_GPIO_Port, R_Pin);
 8000698:	4b64      	ldr	r3, [pc, #400]	; (800082c <MX_GPIO_Init+0x1bc>)
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff fde3 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(L_GPIO_Port, L_Pin);
 80006a2:	4b62      	ldr	r3, [pc, #392]	; (800082c <MX_GPIO_Init+0x1bc>)
 80006a4:	2102      	movs	r1, #2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fdde 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(C_GPIO_Port, C_Pin);
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	2120      	movs	r1, #32
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fdd8 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(B_GPIO_Port, B_Pin);
 80006b8:	2390      	movs	r3, #144	; 0x90
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fdd2 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(A_GPIO_Port, A_Pin);
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff fdcc 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signal_right_GPIO_Port, signal_right_Pin);
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	019a      	lsls	r2, r3, #6
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff fdc4 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signal_left_GPIO_Port, signal_left_Pin);
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	01da      	lsls	r2, r3, #7
 80006e4:	2390      	movs	r3, #144	; 0x90
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fdbc 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = R_Pin;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2201      	movs	r2, #1
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000708:	003b      	movs	r3, r7
 800070a:	2202      	movs	r2, #2
 800070c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(R_GPIO_Port, &GPIO_InitStruct);
 800070e:	003b      	movs	r3, r7
 8000710:	4a46      	ldr	r2, [pc, #280]	; (800082c <MX_GPIO_Init+0x1bc>)
 8000712:	0019      	movs	r1, r3
 8000714:	0010      	movs	r0, r2
 8000716:	f000 fc71 	bl	8000ffc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = L_Pin;
 800071a:	003b      	movs	r3, r7
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000720:	003b      	movs	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000732:	003b      	movs	r3, r7
 8000734:	2202      	movs	r2, #2
 8000736:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(L_GPIO_Port, &GPIO_InitStruct);
 8000738:	003b      	movs	r3, r7
 800073a:	4a3c      	ldr	r2, [pc, #240]	; (800082c <MX_GPIO_Init+0x1bc>)
 800073c:	0019      	movs	r1, r3
 800073e:	0010      	movs	r0, r2
 8000740:	f000 fc5c 	bl	8000ffc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = C_Pin;
 8000744:	003b      	movs	r3, r7
 8000746:	2220      	movs	r2, #32
 8000748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800074a:	003b      	movs	r3, r7
 800074c:	2201      	movs	r2, #1
 800074e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800075c:	003b      	movs	r3, r7
 800075e:	2202      	movs	r2, #2
 8000760:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(C_GPIO_Port, &GPIO_InitStruct);
 8000762:	003a      	movs	r2, r7
 8000764:	2390      	movs	r3, #144	; 0x90
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fc46 	bl	8000ffc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B_Pin;
 8000770:	003b      	movs	r3, r7
 8000772:	2240      	movs	r2, #64	; 0x40
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000776:	003b      	movs	r3, r7
 8000778:	2201      	movs	r2, #1
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000782:	003b      	movs	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000788:	003b      	movs	r3, r7
 800078a:	2202      	movs	r2, #2
 800078c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 800078e:	003a      	movs	r2, r7
 8000790:	2390      	movs	r3, #144	; 0x90
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fc30 	bl	8000ffc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A_Pin;
 800079c:	003b      	movs	r3, r7
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80007b4:	003b      	movs	r3, r7
 80007b6:	2202      	movs	r2, #2
 80007b8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 80007ba:	003a      	movs	r2, r7
 80007bc:	2390      	movs	r3, #144	; 0x90
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fc1a 	bl	8000ffc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = signal_right_Pin;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0192      	lsls	r2, r2, #6
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2202      	movs	r2, #2
 80007e6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signal_right_GPIO_Port, &GPIO_InitStruct);
 80007e8:	003a      	movs	r2, r7
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fc03 	bl	8000ffc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = signal_left_Pin;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	01d2      	lsls	r2, r2, #7
 80007fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fe:	003b      	movs	r3, r7
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800080a:	003b      	movs	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000810:	003b      	movs	r3, r7
 8000812:	2202      	movs	r2, #2
 8000814:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signal_left_GPIO_Port, &GPIO_InitStruct);
 8000816:	003a      	movs	r2, r7
 8000818:	2390      	movs	r3, #144	; 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fbec 	bl	8000ffc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b006      	add	sp, #24
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48001400 	.word	0x48001400

08000830 <I2C_Send_Buffer>:
  * @param slave_address I2C slave address
  * @param data Pointer to the data buffer
  * @param size Size of the data buffer
  */
void I2C_Send_Buffer(uint8_t slave_address, uint8_t *data, uint16_t size)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6039      	str	r1, [r7, #0]
 8000838:	0011      	movs	r1, r2
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	1c02      	adds	r2, r0, #0
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	1c0a      	adds	r2, r1, #0
 8000844:	801a      	strh	r2, [r3, #0]
    /* Wait until I2C is not busy */
    while (I2C1->ISR & I2C_ISR_BUSY);
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <I2C_Send_Buffer+0x94>)
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4013      	ands	r3, r2
 8000852:	d1f9      	bne.n	8000848 <I2C_Send_Buffer+0x18>

    /* Configure the slave address and the number of bytes to transfer */
    I2C1->CR2 = (slave_address << 1) |    // Set slave address (7-bit left aligned)
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	005a      	lsls	r2, r3, #1
                (size << 16) |            // Set number of bytes to transfer
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	041b      	lsls	r3, r3, #16
    I2C1->CR2 = (slave_address << 1) |    // Set slave address (7-bit left aligned)
 8000860:	4313      	orrs	r3, r2
 8000862:	0019      	movs	r1, r3
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <I2C_Send_Buffer+0x94>)
                I2C_CR2_START |           // Generate START condition
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <I2C_Send_Buffer+0x98>)
 8000868:	430a      	orrs	r2, r1
    I2C1->CR2 = (slave_address << 1) |    // Set slave address (7-bit left aligned)
 800086a:	605a      	str	r2, [r3, #4]
                I2C_CR2_AUTOEND;          // Enable AUTOEND (STOP condition automatically after N bytes)

    /* Transmit the data */
    for (uint16_t i = 0; i < size; i++)
 800086c:	230e      	movs	r3, #14
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	e012      	b.n	800089c <I2C_Send_Buffer+0x6c>
    {
        /* Wait until TXIS (Transmit Interrupt Status) is set */

    	while (!(I2C1->ISR & I2C_ISR_TXIS));
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <I2C_Send_Buffer+0x94>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	2202      	movs	r2, #2
 800087e:	4013      	ands	r3, r2
 8000880:	d0fa      	beq.n	8000878 <I2C_Send_Buffer+0x48>

        /* Write the data to the transmit data register */
        I2C1->TXDR = data[i];
 8000882:	210e      	movs	r1, #14
 8000884:	187b      	adds	r3, r7, r1
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	18d3      	adds	r3, r2, r3
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <I2C_Send_Buffer+0x94>)
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
    for (uint16_t i = 0; i < size; i++)
 8000892:	187b      	adds	r3, r7, r1
 8000894:	881a      	ldrh	r2, [r3, #0]
 8000896:	187b      	adds	r3, r7, r1
 8000898:	3201      	adds	r2, #1
 800089a:	801a      	strh	r2, [r3, #0]
 800089c:	230e      	movs	r3, #14
 800089e:	18fa      	adds	r2, r7, r3
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3e5      	bcc.n	8000876 <I2C_Send_Buffer+0x46>
    }

    /* Wait until the STOP condition is generated */
    while (!(I2C1->ISR & I2C_ISR_STOPF));
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <I2C_Send_Buffer+0x94>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	2220      	movs	r2, #32
 80008b2:	4013      	ands	r3, r2
 80008b4:	d0fa      	beq.n	80008ac <I2C_Send_Buffer+0x7c>

    /* Clear the STOP flag */
    I2C1->ICR = I2C_ICR_STOPCF;
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <I2C_Send_Buffer+0x94>)
 80008b8:	2220      	movs	r2, #32
 80008ba:	61da      	str	r2, [r3, #28]
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b004      	add	sp, #16
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40005400 	.word	0x40005400
 80008c8:	02002000 	.word	0x02002000

080008cc <SetControlPins>:



bool SetControlPins(uint8_t code)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	701a      	strb	r2, [r3, #0]
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	4013      	ands	r3, r2
 80008e0:	d001      	beq.n	80008e6 <SetControlPins+0x1a>
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	e001      	b.n	80008ea <SetControlPins+0x1e>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	041a      	lsls	r2, r3, #16
                  (code & 0x02 ? B_Pin : (uint32_t) B_Pin << 16U) |
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2102      	movs	r1, #2
 80008f0:	400b      	ands	r3, r1
 80008f2:	d001      	beq.n	80008f8 <SetControlPins+0x2c>
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	e001      	b.n	80008fc <SetControlPins+0x30>
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	03db      	lsls	r3, r3, #15
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 80008fc:	431a      	orrs	r2, r3
 80008fe:	0011      	movs	r1, r2
                  (code & 0x04 ? C_Pin : (uint32_t) C_Pin << 16U);
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2204      	movs	r2, #4
 8000906:	4013      	ands	r3, r2
 8000908:	d001      	beq.n	800090e <SetControlPins+0x42>
 800090a:	2220      	movs	r2, #32
 800090c:	e001      	b.n	8000912 <SetControlPins+0x46>
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	039a      	lsls	r2, r3, #14
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 8000912:	2390      	movs	r3, #144	; 0x90
 8000914:	05db      	lsls	r3, r3, #23
                  (code & 0x02 ? B_Pin : (uint32_t) B_Pin << 16U) |
 8000916:	430a      	orrs	r2, r1
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 8000918:	619a      	str	r2, [r3, #24]
    return true;
 800091a:	2301      	movs	r3, #1
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <DelayWithTimer>:

void DelayWithTimer(uint32_t ms)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    TIM14->CNT = 0;                               // Reset counter
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <DelayWithTimer+0x24>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
    while (TIM14->CNT < ms);                      // Wait for counter to reach ms
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <DelayWithTimer+0x24>)
 8000936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	d8fa      	bhi.n	8000934 <DelayWithTimer+0x10>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40002000 	.word	0x40002000

0800094c <makeTurn>:



//UTILITY FUNCTIONS

void makeTurn(uint8_t direction_x){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	701a      	strb	r2, [r3, #0]
    uint8_t right_line = sensor_data[6];


	 */

	uint8_t lineNotFound=1;
 8000958:	230f      	movs	r3, #15
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]

	switch(direction_x){
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d900      	bls.n	800096a <makeTurn+0x1e>
 8000968:	e095      	b.n	8000a96 <makeTurn+0x14a>
 800096a:	009a      	lsls	r2, r3, #2
 800096c:	4b4d      	ldr	r3, [pc, #308]	; (8000aa4 <makeTurn+0x158>)
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	469f      	mov	pc, r3

	case 0:
		go(1,0);
 8000974:	2100      	movs	r1, #0
 8000976:	2001      	movs	r0, #1
 8000978:	f000 f898 	bl	8000aac <go>
	case 1: //front
		//do nothing
		go(1,1);
 800097c:	2101      	movs	r1, #1
 800097e:	2001      	movs	r0, #1
 8000980:	f000 f894 	bl	8000aac <go>
	case 2: //right
		go(2,1);
 8000984:	2101      	movs	r1, #1
 8000986:	2002      	movs	r0, #2
 8000988:	f000 f890 	bl	8000aac <go>
		go(4,11); //make a first turn
 800098c:	210b      	movs	r1, #11
 800098e:	2004      	movs	r0, #4
 8000990:	f000 f88c 	bl	8000aac <go>
		read_sensors();
 8000994:	f000 f8ba 	bl	8000b0c <read_sensors>
		while(lineNotFound ){
 8000998:	e01a      	b.n	80009d0 <makeTurn+0x84>

			go(1,11); // continue rotating until line found
 800099a:	210b      	movs	r1, #11
 800099c:	2001      	movs	r0, #1
 800099e:	f000 f885 	bl	8000aac <go>
			read_sensors();  //update sensors
 80009a2:	f000 f8b3 	bl	8000b0c <read_sensors>
			if (sensor_data[4] || sensor_data[0] || sensor_data[6]){
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <makeTurn+0x15c>)
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d107      	bne.n	80009be <makeTurn+0x72>
 80009ae:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <makeTurn+0x15c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <makeTurn+0x72>
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <makeTurn+0x15c>)
 80009b8:	799b      	ldrb	r3, [r3, #6]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <makeTurn+0x84>
				lineNotFound=0;
 80009be:	230f      	movs	r3, #15
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
				go(1,0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 f86f 	bl	8000aac <go>
				return;
 80009ce:	e066      	b.n	8000a9e <makeTurn+0x152>
		while(lineNotFound ){
 80009d0:	230f      	movs	r3, #15
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1df      	bne.n	800099a <makeTurn+0x4e>
			}
		}

	case 3: //left turn
		go(2,1);
 80009da:	2101      	movs	r1, #1
 80009dc:	2002      	movs	r0, #2
 80009de:	f000 f865 	bl	8000aac <go>
		go(4,10); //make a first turn
 80009e2:	210a      	movs	r1, #10
 80009e4:	2004      	movs	r0, #4
 80009e6:	f000 f861 	bl	8000aac <go>
		read_sensors();
 80009ea:	f000 f88f 	bl	8000b0c <read_sensors>
		while( lineNotFound){
 80009ee:	e01e      	b.n	8000a2e <makeTurn+0xe2>

			go(1,10); // continue rotating until line found
 80009f0:	210a      	movs	r1, #10
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 f85a 	bl	8000aac <go>
			read_sensors();  //update sensors
 80009f8:	f000 f888 	bl	8000b0c <read_sensors>
			if (sensor_data[4] || sensor_data[0] || sensor_data[6]){
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <makeTurn+0x15c>)
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10c      	bne.n	8000a1e <makeTurn+0xd2>
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <makeTurn+0x15c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d108      	bne.n	8000a1e <makeTurn+0xd2>
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <makeTurn+0x15c>)
 8000a0e:	799b      	ldrb	r3, [r3, #6]
 8000a10:	210f      	movs	r1, #15
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	1879      	adds	r1, r7, r1
 8000a16:	7809      	ldrb	r1, [r1, #0]
 8000a18:	7011      	strb	r1, [r2, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <makeTurn+0xe2>
				lineNotFound=0;
 8000a1e:	230f      	movs	r3, #15
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
				go(1,0);
 8000a26:	2100      	movs	r1, #0
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 f83f 	bl	8000aac <go>
		while( lineNotFound){
 8000a2e:	230f      	movs	r3, #15
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1db      	bne.n	80009f0 <makeTurn+0xa4>
			}
		}


	case 4: //left turn
		go(3,12);
 8000a38:	210c      	movs	r1, #12
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 f836 	bl	8000aac <go>
		go(6,11); //make a first turn
 8000a40:	210b      	movs	r1, #11
 8000a42:	2006      	movs	r0, #6
 8000a44:	f000 f832 	bl	8000aac <go>
		read_sensors();
 8000a48:	f000 f860 	bl	8000b0c <read_sensors>
		while( lineNotFound){
 8000a4c:	e01e      	b.n	8000a8c <makeTurn+0x140>

			go(1,11); // continue rotating until line found
 8000a4e:	210b      	movs	r1, #11
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 f82b 	bl	8000aac <go>
			read_sensors();  //update sensors
 8000a56:	f000 f859 	bl	8000b0c <read_sensors>
			if (sensor_data[4] || sensor_data[0] || sensor_data[6]){
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <makeTurn+0x15c>)
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10c      	bne.n	8000a7c <makeTurn+0x130>
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <makeTurn+0x15c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d108      	bne.n	8000a7c <makeTurn+0x130>
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <makeTurn+0x15c>)
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	1879      	adds	r1, r7, r1
 8000a74:	7809      	ldrb	r1, [r1, #0]
 8000a76:	7011      	strb	r1, [r2, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d007      	beq.n	8000a8c <makeTurn+0x140>
				lineNotFound=0;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
				go(1,0);
 8000a84:	2100      	movs	r1, #0
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 f810 	bl	8000aac <go>
		while( lineNotFound){
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1db      	bne.n	8000a4e <makeTurn+0x102>
			}
		}

	default:
		go(1,0);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 f807 	bl	8000aac <go>
	} //end of switch




}//end of makeTurn()
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b004      	add	sp, #16
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08001124 	.word	0x08001124
 8000aa8:	2000001c 	.word	0x2000001c

08000aac <go>:



void go(uint8_t max_x, uint8_t direction_x){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	1c0a      	adds	r2, r1, #0
 8000abc:	701a      	strb	r2, [r3, #0]

	 *
	 */


	for(uint8_t x=0 ;x< max_x; x++ ){
 8000abe:	230f      	movs	r3, #15
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e015      	b.n	8000af4 <go+0x48>

	 SendSingleValue(0x08, 128, direction_x);
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	2008      	movs	r0, #8
 8000ad4:	f000 f966 	bl	8000da4 <SendSingleValue>
	 DelayWithTimer(100);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f7ff ff23 	bl	8000924 <DelayWithTimer>
	 SendSingleValue(0x08, 128, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f000 f95e 	bl	8000da4 <SendSingleValue>
	for(uint8_t x=0 ;x< max_x; x++ ){
 8000ae8:	210f      	movs	r1, #15
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	3201      	adds	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fa      	adds	r2, r7, r3
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3e2      	bcc.n	8000ac8 <go+0x1c>

	}

}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b004      	add	sp, #16
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <read_sensors>:

void read_sensors() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
    for (uint8_t code = 0; code < 8; code++) {
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e02a      	b.n	8000b70 <read_sensors+0x64>
        if (SetControlPins(code)) {
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fed4 	bl	80008cc <SetControlPins>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d01e      	beq.n	8000b66 <read_sensors+0x5a>
            // Start ADC conversion
             ADC1->CR |= ADC_CR_ADSTART;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <read_sensors+0x78>)
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <read_sensors+0x78>)
 8000b2e:	2104      	movs	r1, #4
 8000b30:	430a      	orrs	r2, r1
 8000b32:	609a      	str	r2, [r3, #8]

            // Wait for conversion to complete
            while (!(ADC1->ISR & ADC_ISR_EOC));
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <read_sensors+0x78>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d0fa      	beq.n	8000b36 <read_sensors+0x2a>
            //uint16_t adcValue = ADC1->DR;

            // Store the raw ADC value in the sensor_data array

            //convertadc to bin
            uint8_t adcValue = (ADC1->DR > 1000) ? 1 : 0; // Threshold ADC value to 1 or 0
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <read_sensors+0x78>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	22fa      	movs	r2, #250	; 0xfa
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	419b      	sbcs	r3, r3
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	701a      	strb	r2, [r3, #0]


            sensor_data[code] = adcValue;
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <read_sensors+0x7c>)
 8000b5a:	1db9      	adds	r1, r7, #6
 8000b5c:	7809      	ldrb	r1, [r1, #0]
 8000b5e:	54d1      	strb	r1, [r2, r3]

            // Small delay for stability
            DelayWithTimer(5);
 8000b60:	2005      	movs	r0, #5
 8000b62:	f7ff fedf 	bl	8000924 <DelayWithTimer>
    for (uint8_t code = 0; code < 8; code++) {
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	3201      	adds	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d9d0      	bls.n	8000b1a <read_sensors+0xe>
        }
    }
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40012400 	.word	0x40012400
 8000b88:	2000001c 	.word	0x2000001c

08000b8c <line_process>:
uint8_t helper[2] = {0, 0};  // helper[0] = RIGHT used, helper[1] = LEFT used

uint8_t line_process() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
    // Assign sensor data to logical variables
    uint8_t left_line = sensor_data[0];
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	4a7f      	ldr	r2, [pc, #508]	; (8000d94 <line_process+0x208>)
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	701a      	strb	r2, [r3, #0]
    uint8_t mid_line = sensor_data[4];
 8000b9a:	1d7b      	adds	r3, r7, #5
 8000b9c:	4a7d      	ldr	r2, [pc, #500]	; (8000d94 <line_process+0x208>)
 8000b9e:	7912      	ldrb	r2, [r2, #4]
 8000ba0:	701a      	strb	r2, [r3, #0]
    uint8_t right_line = sensor_data[6];
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4a7b      	ldr	r2, [pc, #492]	; (8000d94 <line_process+0x208>)
 8000ba6:	7992      	ldrb	r2, [r2, #6]
 8000ba8:	701a      	strb	r2, [r3, #0]

    // Default direction is STOP
    uint8_t direction = 0;
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]


    if (mid_line) {
 8000bb0:	1d7b      	adds	r3, r7, #5
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d045      	beq.n	8000c44 <line_process+0xb8>
    	// Middle sensor is on the line
        if (left_line && right_line) {
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d013      	beq.n	8000be8 <line_process+0x5c>
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00f      	beq.n	8000be8 <line_process+0x5c>
            // All sensors are active -> Stop
        	CROSS++;
 8000bc8:	4b73      	ldr	r3, [pc, #460]	; (8000d98 <line_process+0x20c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b71      	ldr	r3, [pc, #452]	; (8000d98 <line_process+0x20c>)
 8000bd2:	701a      	strb	r2, [r3, #0]
            direction = 0;  // STOP
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000bda:	4b70      	ldr	r3, [pc, #448]	; (8000d9c <line_process+0x210>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000be0:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <line_process+0x210>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	705a      	strb	r2, [r3, #1]
 8000be6:	e0a5      	b.n	8000d34 <line_process+0x1a8>
        } else if (left_line && !right_line) {
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00d      	beq.n	8000c0c <line_process+0x80>
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <line_process+0x80>
            // Middle and Left sensors active -> Adjust slightly left
            direction = 5;  // A LITTLE TO LEFT
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000bfe:	4b67      	ldr	r3, [pc, #412]	; (8000d9c <line_process+0x210>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000c04:	4b65      	ldr	r3, [pc, #404]	; (8000d9c <line_process+0x210>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	705a      	strb	r2, [r3, #1]
 8000c0a:	e093      	b.n	8000d34 <line_process+0x1a8>
        } else if (right_line && !left_line) {
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00d      	beq.n	8000c30 <line_process+0xa4>
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <line_process+0xa4>
            // Middle and Right sensors active -> Adjust slightly right
            direction = 4;  // A LITTLE TO RIGHT
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	2204      	movs	r2, #4
 8000c20:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000c22:	4b5e      	ldr	r3, [pc, #376]	; (8000d9c <line_process+0x210>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000c28:	4b5c      	ldr	r3, [pc, #368]	; (8000d9c <line_process+0x210>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	705a      	strb	r2, [r3, #1]
 8000c2e:	e081      	b.n	8000d34 <line_process+0x1a8>
        } else {
            // Only Middle sensor active -> Go Forward
            direction = 1;  // FORWARD
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000c36:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <line_process+0x210>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <line_process+0x210>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	705a      	strb	r2, [r3, #1]
 8000c42:	e077      	b.n	8000d34 <line_process+0x1a8>
        }
    } else {  // Middle sensor is off the line
        if (left_line && !right_line) {
 8000c44:	1dbb      	adds	r3, r7, #6
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00d      	beq.n	8000c68 <line_process+0xdc>
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d109      	bne.n	8000c68 <line_process+0xdc>
            // Line is on the left -> Turn left
            direction = 3;  // LEFT
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	2203      	movs	r2, #3
 8000c58:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <line_process+0x210>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <line_process+0x210>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	705a      	strb	r2, [r3, #1]
 8000c66:	e065      	b.n	8000d34 <line_process+0x1a8>
        } else if (right_line && !left_line) {
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00d      	beq.n	8000c8c <line_process+0x100>
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d109      	bne.n	8000c8c <line_process+0x100>
            // Line is on the right -> Turn right
            direction = 2;  // RIGHT
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <line_process+0x210>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <line_process+0x210>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	705a      	strb	r2, [r3, #1]
 8000c8a:	e053      	b.n	8000d34 <line_process+0x1a8>
        } else if (!left_line && !right_line) {
 8000c8c:	1dbb      	adds	r3, r7, #6
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d144      	bne.n	8000d1e <line_process+0x192>
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d140      	bne.n	8000d1e <line_process+0x192>



            // All sensors are off -> Alternate based on helper
            if (last_direction == 2 && helper[1] == 0) {
 8000c9c:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <line_process+0x214>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d10e      	bne.n	8000cc2 <line_process+0x136>
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <line_process+0x210>)
 8000ca6:	785b      	ldrb	r3, [r3, #1]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10a      	bne.n	8000cc2 <line_process+0x136>
                direction = 2;  // Guess LEFT
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	2202      	movs	r2, #2
 8000cb0:	701a      	strb	r2, [r3, #0]
                go(1,2);
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fef9 	bl	8000aac <go>
                helper[1] = 1;  // Mark RIGHT as used
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <line_process+0x210>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	705a      	strb	r2, [r3, #1]
 8000cc0:	e02c      	b.n	8000d1c <line_process+0x190>
            }

             else if (last_direction == 3 && helper[0] == 0) {
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <line_process+0x214>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d10e      	bne.n	8000ce8 <line_process+0x15c>
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <line_process+0x210>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10a      	bne.n	8000ce8 <line_process+0x15c>
                direction = 3;  // Guess RIGHT
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	701a      	strb	r2, [r3, #0]
                go(1,3);
 8000cd8:	2103      	movs	r1, #3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff fee6 	bl	8000aac <go>
                helper[0] = 1;  // Mark LEFT as used
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <line_process+0x210>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e019      	b.n	8000d1c <line_process+0x190>
             }


             else if (helper[0] == 1 && helper[1] == 1) {
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <line_process+0x210>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d120      	bne.n	8000d32 <line_process+0x1a6>
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <line_process+0x210>)
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d11c      	bne.n	8000d32 <line_process+0x1a6>
                // Both directions used -> Stop
                direction = 0;  // STOP
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
                helper[0] = 0;  // Reset guesses
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <line_process+0x210>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                helper[1] = 0;  // Reset guesses
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <line_process+0x210>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	705a      	strb	r2, [r3, #1]
                go(1,4);
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff fecd 	bl	8000aac <go>
                go(1,1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff fec9 	bl	8000aac <go>
            if (last_direction == 2 && helper[1] == 0) {
 8000d1a:	e00a      	b.n	8000d32 <line_process+0x1a6>
 8000d1c:	e009      	b.n	8000d32 <line_process+0x1a6>



        } else {
            // Unexpected case: Default to STOP
            direction = 0;  // STOP
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <line_process+0x210>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <line_process+0x210>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	705a      	strb	r2, [r3, #1]
 8000d30:	e000      	b.n	8000d34 <line_process+0x1a8>
            if (last_direction == 2 && helper[1] == 0) {
 8000d32:	46c0      	nop			; (mov r8, r8)
        }
    }

    // Update last_direction for tracking
    if (direction != 6 && direction != 0) {  // Exclude STOP and BACK commands from direction memory
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b06      	cmp	r3, #6
 8000d3a:	d007      	beq.n	8000d4c <line_process+0x1c0>
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <line_process+0x1c0>
        last_direction = direction;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <line_process+0x214>)
 8000d46:	1dfa      	adds	r2, r7, #7
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
    }

    if(helper[1] && !helper[0]){
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <line_process+0x210>)
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <line_process+0x1d6>
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <line_process+0x210>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <line_process+0x1d6>
    	last_direction=3;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <line_process+0x214>)
 8000d5e:	2203      	movs	r2, #3
 8000d60:	701a      	strb	r2, [r3, #0]
    } if( helper[0] && !helper[1]){
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <line_process+0x210>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <line_process+0x1ec>
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <line_process+0x210>)
 8000d6c:	785b      	ldrb	r3, [r3, #1]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <line_process+0x1ec>
    	last_direction=2;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <line_process+0x214>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	701a      	strb	r2, [r3, #0]
    } if(direction==0){
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <line_process+0x1fa>
    	last_direction=0;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <line_process+0x214>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]





    return direction;
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	2000001c 	.word	0x2000001c
 8000d98:	20000025 	.word	0x20000025
 8000d9c:	20000028 	.word	0x20000028
 8000da0:	20000024 	.word	0x20000024

08000da4 <SendSingleValue>:
}


//COMUNICATION FUNCTIONS

void SendSingleValue(uint8_t slave_address, uint8_t index, uint16_t value) {
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0004      	movs	r4, r0
 8000dac:	0008      	movs	r0, r1
 8000dae:	0011      	movs	r1, r2
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	1c22      	adds	r2, r4, #0
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	1dbb      	adds	r3, r7, #6
 8000db8:	1c02      	adds	r2, r0, #0
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	1c0a      	adds	r2, r1, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
    uint8_t buffer[3];
    buffer[0] = index;               // Index
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	1dba      	adds	r2, r7, #6
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
    buffer[1] = (value >> 8) & 0xFF; // High byte of value
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	705a      	strb	r2, [r3, #1]
    buffer[2] = value & 0xFF;        // Low byte of value
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	709a      	strb	r2, [r3, #2]

    I2C_Send_Buffer(slave_address, buffer, sizeof(buffer)); // Send single value
 8000de4:	1879      	adds	r1, r7, r1
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2203      	movs	r2, #3
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fd1f 	bl	8000830 <I2C_Send_Buffer>
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b005      	add	sp, #20
 8000df8:	bd90      	pop	{r4, r7, pc}

08000dfa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfe:	e7fe      	b.n	8000dfe <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <HardFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_IRQn 0 */

  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e3c:	f7ff fff7 	bl	8000e2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	; (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e66:	f000 f92d 	bl	80010c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6a:	f7ff fa09 	bl	8000280 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   r0, =_estack
 8000e70:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e7c:	08001140 	.word	0x08001140
  ldr r2, =_sbss
 8000e80:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e84:	2000002c 	.word	0x2000002c

08000e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>

08000e8a <LL_GPIO_SetPinMode>:
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	435b      	muls	r3, r3
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	189b      	adds	r3, r3, r2
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	001a      	movs	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	435b      	muls	r3, r3
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	434b      	muls	r3, r1
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <LL_GPIO_SetPinOutputType>:
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	434b      	muls	r3, r1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LL_GPIO_SetPinSpeed>:
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	435b      	muls	r3, r3
 8000f00:	001a      	movs	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	189b      	adds	r3, r3, r2
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	435b      	muls	r3, r3
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	434b      	muls	r3, r1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b004      	add	sp, #16
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <LL_GPIO_SetPinPull>:
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	68d9      	ldr	r1, [r3, #12]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	435b      	muls	r3, r3
 8000f38:	001a      	movs	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	43db      	mvns	r3, r3
 8000f42:	400b      	ands	r3, r1
 8000f44:	001a      	movs	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	435b      	muls	r3, r3
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	434b      	muls	r3, r1
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b004      	add	sp, #16
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LL_GPIO_SetAFPin_0_7>:
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a19      	ldr	r1, [r3, #32]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	435b      	muls	r3, r3
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4353      	muls	r3, r2
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	435a      	muls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	400b      	ands	r3, r1
 8000f82:	001a      	movs	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	435b      	muls	r3, r3
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	434b      	muls	r3, r1
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	434b      	muls	r3, r1
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	434b      	muls	r3, r1
 8000f94:	431a      	orrs	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	621a      	str	r2, [r3, #32]
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LL_GPIO_SetAFPin_8_15>:
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	0a12      	lsrs	r2, r2, #8
 8000fba:	4353      	muls	r3, r2
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	0a12      	lsrs	r2, r2, #8
 8000fc0:	4353      	muls	r3, r2
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	0a12      	lsrs	r2, r2, #8
 8000fc6:	435a      	muls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	0a09      	lsrs	r1, r1, #8
 8000fdc:	434b      	muls	r3, r1
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	0a09      	lsrs	r1, r1, #8
 8000fe2:	434b      	muls	r3, r1
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	0a09      	lsrs	r1, r1, #8
 8000fe8:	434b      	muls	r3, r1
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	434b      	muls	r3, r1
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b004      	add	sp, #16
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800100a:	e048      	b.n	800109e <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d03a      	beq.n	8001098 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d003      	beq.n	8001032 <LL_GPIO_Init+0x36>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d10e      	bne.n	8001050 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff ff56 	bl	8000eec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff ff39 	bl	8000ec2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff63 	bl	8000f24 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d111      	bne.n	800108a <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2bff      	cmp	r3, #255	; 0xff
 800106a:	d807      	bhi.n	800107c <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff71 	bl	8000f5c <LL_GPIO_SetAFPin_0_7>
 800107a:	e006      	b.n	800108a <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff8c 	bl	8000fa2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fef9 	bl	8000e8a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3301      	adds	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	40da      	lsrs	r2, r3
 80010a6:	1e13      	subs	r3, r2, #0
 80010a8:	d1b0      	bne.n	800100c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <memset>:
 80010b4:	0003      	movs	r3, r0
 80010b6:	1882      	adds	r2, r0, r2
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d100      	bne.n	80010be <memset+0xa>
 80010bc:	4770      	bx	lr
 80010be:	7019      	strb	r1, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	e7f9      	b.n	80010b8 <memset+0x4>

080010c4 <__libc_init_array>:
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	2600      	movs	r6, #0
 80010c8:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <__libc_init_array+0x38>)
 80010ca:	4d0d      	ldr	r5, [pc, #52]	; (8001100 <__libc_init_array+0x3c>)
 80010cc:	1b64      	subs	r4, r4, r5
 80010ce:	10a4      	asrs	r4, r4, #2
 80010d0:	42a6      	cmp	r6, r4
 80010d2:	d109      	bne.n	80010e8 <__libc_init_array+0x24>
 80010d4:	2600      	movs	r6, #0
 80010d6:	f000 f819 	bl	800110c <_init>
 80010da:	4c0a      	ldr	r4, [pc, #40]	; (8001104 <__libc_init_array+0x40>)
 80010dc:	4d0a      	ldr	r5, [pc, #40]	; (8001108 <__libc_init_array+0x44>)
 80010de:	1b64      	subs	r4, r4, r5
 80010e0:	10a4      	asrs	r4, r4, #2
 80010e2:	42a6      	cmp	r6, r4
 80010e4:	d105      	bne.n	80010f2 <__libc_init_array+0x2e>
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	00b3      	lsls	r3, r6, #2
 80010ea:	58eb      	ldr	r3, [r5, r3]
 80010ec:	4798      	blx	r3
 80010ee:	3601      	adds	r6, #1
 80010f0:	e7ee      	b.n	80010d0 <__libc_init_array+0xc>
 80010f2:	00b3      	lsls	r3, r6, #2
 80010f4:	58eb      	ldr	r3, [r5, r3]
 80010f6:	4798      	blx	r3
 80010f8:	3601      	adds	r6, #1
 80010fa:	e7f2      	b.n	80010e2 <__libc_init_array+0x1e>
 80010fc:	08001138 	.word	0x08001138
 8001100:	08001138 	.word	0x08001138
 8001104:	0800113c 	.word	0x0800113c
 8001108:	08001138 	.word	0x08001138

0800110c <_init>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001112:	bc08      	pop	{r3}
 8001114:	469e      	mov	lr, r3
 8001116:	4770      	bx	lr

08001118 <_fini>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr
