
_sensor_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000131c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013dc  080013e4  000023e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013dc  080013dc  000023e4  2**0
                  CONTENTS
  4 .ARM          00000000  080013dc  080013dc  000023e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013dc  080013e4  000023e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013dc  080013dc  000023dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013e0  080013e0  000023e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000023e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000000  080013e4  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080013e4  00003054  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ade  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f9  00000000  00000000  00003eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000045e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018e  00000000  00000000  00004808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000afdb  00000000  00000000  00004996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027d0  00000000  00000000  0000f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003daca  00000000  00000000  00012141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004fc0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b0  00000000  00000000  0004fc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00050300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080013c4 	.word	0x080013c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080013c4 	.word	0x080013c4

08000108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b083      	sub	sp, #12
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	6039      	str	r1, [r7, #0]
 8000112:	1dfb      	adds	r3, r7, #7
 8000114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000116:	1dfb      	adds	r3, r7, #7
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2b7f      	cmp	r3, #127	@ 0x7f
 800011c:	d828      	bhi.n	8000170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800011e:	4a2f      	ldr	r2, [pc, #188]	@ (80001dc <__NVIC_SetPriority+0xd4>)
 8000120:	1dfb      	adds	r3, r7, #7
 8000122:	781b      	ldrb	r3, [r3, #0]
 8000124:	b25b      	sxtb	r3, r3
 8000126:	089b      	lsrs	r3, r3, #2
 8000128:	33c0      	adds	r3, #192	@ 0xc0
 800012a:	009b      	lsls	r3, r3, #2
 800012c:	589b      	ldr	r3, [r3, r2]
 800012e:	1dfa      	adds	r2, r7, #7
 8000130:	7812      	ldrb	r2, [r2, #0]
 8000132:	0011      	movs	r1, r2
 8000134:	2203      	movs	r2, #3
 8000136:	400a      	ands	r2, r1
 8000138:	00d2      	lsls	r2, r2, #3
 800013a:	21ff      	movs	r1, #255	@ 0xff
 800013c:	4091      	lsls	r1, r2
 800013e:	000a      	movs	r2, r1
 8000140:	43d2      	mvns	r2, r2
 8000142:	401a      	ands	r2, r3
 8000144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000146:	683b      	ldr	r3, [r7, #0]
 8000148:	019b      	lsls	r3, r3, #6
 800014a:	22ff      	movs	r2, #255	@ 0xff
 800014c:	401a      	ands	r2, r3
 800014e:	1dfb      	adds	r3, r7, #7
 8000150:	781b      	ldrb	r3, [r3, #0]
 8000152:	0018      	movs	r0, r3
 8000154:	2303      	movs	r3, #3
 8000156:	4003      	ands	r3, r0
 8000158:	00db      	lsls	r3, r3, #3
 800015a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800015c:	481f      	ldr	r0, [pc, #124]	@ (80001dc <__NVIC_SetPriority+0xd4>)
 800015e:	1dfb      	adds	r3, r7, #7
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	b25b      	sxtb	r3, r3
 8000164:	089b      	lsrs	r3, r3, #2
 8000166:	430a      	orrs	r2, r1
 8000168:	33c0      	adds	r3, #192	@ 0xc0
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800016e:	e031      	b.n	80001d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000170:	4a1b      	ldr	r2, [pc, #108]	@ (80001e0 <__NVIC_SetPriority+0xd8>)
 8000172:	1dfb      	adds	r3, r7, #7
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	0019      	movs	r1, r3
 8000178:	230f      	movs	r3, #15
 800017a:	400b      	ands	r3, r1
 800017c:	3b08      	subs	r3, #8
 800017e:	089b      	lsrs	r3, r3, #2
 8000180:	3306      	adds	r3, #6
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	18d3      	adds	r3, r2, r3
 8000186:	3304      	adds	r3, #4
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	1dfa      	adds	r2, r7, #7
 800018c:	7812      	ldrb	r2, [r2, #0]
 800018e:	0011      	movs	r1, r2
 8000190:	2203      	movs	r2, #3
 8000192:	400a      	ands	r2, r1
 8000194:	00d2      	lsls	r2, r2, #3
 8000196:	21ff      	movs	r1, #255	@ 0xff
 8000198:	4091      	lsls	r1, r2
 800019a:	000a      	movs	r2, r1
 800019c:	43d2      	mvns	r2, r2
 800019e:	401a      	ands	r2, r3
 80001a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	019b      	lsls	r3, r3, #6
 80001a6:	22ff      	movs	r2, #255	@ 0xff
 80001a8:	401a      	ands	r2, r3
 80001aa:	1dfb      	adds	r3, r7, #7
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	0018      	movs	r0, r3
 80001b0:	2303      	movs	r3, #3
 80001b2:	4003      	ands	r3, r0
 80001b4:	00db      	lsls	r3, r3, #3
 80001b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001b8:	4809      	ldr	r0, [pc, #36]	@ (80001e0 <__NVIC_SetPriority+0xd8>)
 80001ba:	1dfb      	adds	r3, r7, #7
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	001c      	movs	r4, r3
 80001c0:	230f      	movs	r3, #15
 80001c2:	4023      	ands	r3, r4
 80001c4:	3b08      	subs	r3, #8
 80001c6:	089b      	lsrs	r3, r3, #2
 80001c8:	430a      	orrs	r2, r1
 80001ca:	3306      	adds	r3, #6
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	18c3      	adds	r3, r0, r3
 80001d0:	3304      	adds	r3, #4
 80001d2:	601a      	str	r2, [r3, #0]
}
 80001d4:	46c0      	nop			@ (mov r8, r8)
 80001d6:	46bd      	mov	sp, r7
 80001d8:	b003      	add	sp, #12
 80001da:	bd90      	pop	{r4, r7, pc}
 80001dc:	e000e100 	.word	0xe000e100
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001ec:	4b07      	ldr	r3, [pc, #28]	@ (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001ee:	6959      	ldr	r1, [r3, #20]
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	430a      	orrs	r2, r1
 80001f6:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4013      	ands	r3, r2
 8000200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000202:	68fb      	ldr	r3, [r7, #12]
}
 8000204:	46c0      	nop			@ (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b004      	add	sp, #16
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40021000 	.word	0x40021000

08000210 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 800021a:	69d9      	ldr	r1, [r3, #28]
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	430a      	orrs	r2, r1
 8000222:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000224:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 8000226:	69db      	ldr	r3, [r3, #28]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4013      	ands	r3, r2
 800022c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800022e:	68fb      	ldr	r3, [r7, #12]
}
 8000230:	46c0      	nop			@ (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	b004      	add	sp, #16
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000

0800023c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 8000246:	6999      	ldr	r1, [r3, #24]
 8000248:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	430a      	orrs	r2, r1
 800024e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000250:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4013      	ands	r3, r2
 8000258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800025a:	68fb      	ldr	r3, [r7, #12]
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b004      	add	sp, #16
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000

08000268 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	683a      	ldr	r2, [r7, #0]
 8000276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000278:	46c0      	nop			@ (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t direction=0;
 8000286:	2316      	movs	r3, #22
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
	uint8_t way_to_go[4]= {3,1,4,2};
 800028e:	2310      	movs	r3, #16
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	4a66      	ldr	r2, [pc, #408]	@ (800042c <main+0x1ac>)
 8000294:	601a      	str	r2, [r3, #0]
	uint8_t index=0;
 8000296:	2315      	movs	r3, #21
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
	uint8_t copy_history[16]={0};
 800029e:	003b      	movs	r3, r7
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	3304      	adds	r3, #4
 80002a6:	220c      	movs	r2, #12
 80002a8:	2100      	movs	r1, #0
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f85e 	bl	800136c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f7ff ffc3 	bl	800023c <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80002b6:	2380      	movs	r3, #128	@ 0x80
 80002b8:	055b      	lsls	r3, r3, #21
 80002ba:	0018      	movs	r0, r3
 80002bc:	f7ff ffa8 	bl	8000210 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
   NVIC_SetPriority(SysTick_IRQn, 3);
 80002c0:	2301      	movs	r3, #1
 80002c2:	425b      	negs	r3, r3
 80002c4:	2103      	movs	r1, #3
 80002c6:	0018      	movs	r0, r3
 80002c8:	f7ff ff1e 	bl	8000108 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002cc:	f000 f8bc 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d0:	f000 fa68 	bl	80007a4 <MX_GPIO_Init>
  MX_ADC_Init();
 80002d4:	f000 f8d2 	bl	800047c <MX_ADC_Init>
  MX_I2C1_Init();
 80002d8:	f000 f900 	bl	80004dc <MX_I2C1_Init>
  MX_TIM14_Init();
 80002dc:	f000 f99e 	bl	800061c <MX_TIM14_Init>
 MX_TIM16_Init();
 80002e0:	f000 f9d0 	bl	8000684 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80002e4:	f000 fa08 	bl	80006f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM14->CR1 |= TIM_CR1_CEN; // Start timer
 80002e8:	4b51      	ldr	r3, [pc, #324]	@ (8000430 <main+0x1b0>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b50      	ldr	r3, [pc, #320]	@ (8000430 <main+0x1b0>)
 80002ee:	2101      	movs	r1, #1
 80002f0:	430a      	orrs	r2, r1
 80002f2:	601a      	str	r2, [r3, #0]
         	 //SetleftLow();
          }


*/
          read_sensors();
 80002f4:	f000 fbb8 	bl	8000a68 <read_sensors>


          data_process();
 80002f8:	f000 fd02 	bl	8000d00 <data_process>

          if (enough_data){ // Exit if no data available
 80002fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000434 <main+0x1b4>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d06f      	beq.n	80003e4 <main+0x164>
        	  	 SetSensorRight(0);
 8000304:	2000      	movs	r0, #0
 8000306:	f000 fe72 	bl	8000fee <SetSensorRight>
        	     SetSensorLeft(0);
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fe87 	bl	800101e <SetSensorLeft>

              // Process the data in the history array
              for (uint8_t i = 0; i < DTIndex; i++) {
 8000310:	2317      	movs	r3, #23
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
 8000318:	e05a      	b.n	80003d0 <main+0x150>

             	 //copy_history[i]=history[i];

             	 SetSensorRight(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f000 fe67 	bl	8000fee <SetSensorRight>
             	 SetSensorLeft(1);
 8000320:	2001      	movs	r0, #1
 8000322:	f000 fe7c 	bl	800101e <SetSensorLeft>
             	DelayWithTimer(500);
 8000326:	23fa      	movs	r3, #250	@ 0xfa
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fb58 	bl	80009e0 <DelayWithTimer>
             	SetSensorRight(0);
 8000330:	2000      	movs	r0, #0
 8000332:	f000 fe5c 	bl	8000fee <SetSensorRight>
             	 SetSensorLeft(0);
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fe71 	bl	800101e <SetSensorLeft>
             	DelayWithTimer(500);
 800033c:	23fa      	movs	r3, #250	@ 0xfa
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fb4d 	bl	80009e0 <DelayWithTimer>
             	SetSensorRight(1);
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fe51 	bl	8000fee <SetSensorRight>
             	SetSensorLeft(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 fe66 	bl	800101e <SetSensorLeft>
             	DelayWithTimer(500);
 8000352:	23fa      	movs	r3, #250	@ 0xfa
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	0018      	movs	r0, r3
 8000358:	f000 fb42 	bl	80009e0 <DelayWithTimer>

             	 if (history[i]==1){
 800035c:	2317      	movs	r3, #23
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4a35      	ldr	r2, [pc, #212]	@ (8000438 <main+0x1b8>)
 8000364:	5cd3      	ldrb	r3, [r2, r3]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d10f      	bne.n	800038a <main+0x10a>
                	 SetSensorRight(0);
 800036a:	2000      	movs	r0, #0
 800036c:	f000 fe3f 	bl	8000fee <SetSensorRight>
                	 SetSensorLeft(1);
 8000370:	2001      	movs	r0, #1
 8000372:	f000 fe54 	bl	800101e <SetSensorLeft>
                	 DelayWithTimer(500);
 8000376:	23fa      	movs	r3, #250	@ 0xfa
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fb30 	bl	80009e0 <DelayWithTimer>
                	 DelayWithTimer(500);
 8000380:	23fa      	movs	r3, #250	@ 0xfa
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fb2b 	bl	80009e0 <DelayWithTimer>
             	 }
             	 if (history[i]==0){
 800038a:	2317      	movs	r3, #23
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4a29      	ldr	r2, [pc, #164]	@ (8000438 <main+0x1b8>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d10f      	bne.n	80003b8 <main+0x138>
                	 SetSensorRight(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 fe28 	bl	8000fee <SetSensorRight>
                	 SetSensorLeft(0);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fe3d 	bl	800101e <SetSensorLeft>
                	 DelayWithTimer(500);
 80003a4:	23fa      	movs	r3, #250	@ 0xfa
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fb19 	bl	80009e0 <DelayWithTimer>
                	 DelayWithTimer(500);
 80003ae:	23fa      	movs	r3, #250	@ 0xfa
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fb14 	bl	80009e0 <DelayWithTimer>
             	 }

             	 SetSensorRight(0);
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fe18 	bl	8000fee <SetSensorRight>
             	 SetSensorLeft(0);
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 fe2d 	bl	800101e <SetSensorLeft>
              for (uint8_t i = 0; i < DTIndex; i++) {
 80003c4:	2117      	movs	r1, #23
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	3201      	adds	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
 80003d0:	4b1a      	ldr	r3, [pc, #104]	@ (800043c <main+0x1bc>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2217      	movs	r2, #23
 80003d6:	18ba      	adds	r2, r7, r2
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d39d      	bcc.n	800031a <main+0x9a>
              }
              enough_data = 0;
 80003de:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <main+0x1b4>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]

*/



          direction=line_process() ;
 80003e4:	2516      	movs	r5, #22
 80003e6:	197c      	adds	r4, r7, r5
 80003e8:	f000 fb7e 	bl	8000ae8 <line_process>
 80003ec:	0003      	movs	r3, r0
 80003ee:	7023      	strb	r3, [r4, #0]
           // Array of bytes to send via I2C
          //go( times , direction, duration)

          if (CK_set && direction==1){
 80003f0:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <main+0x1c0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d007      	beq.n	8000408 <main+0x188>
 80003f8:	197b      	adds	r3, r7, r5
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d103      	bne.n	8000408 <main+0x188>
        	  speed=170;
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <main+0x1c4>)
 8000402:	22aa      	movs	r2, #170	@ 0xaa
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e002      	b.n	800040e <main+0x18e>
          }else{
        	  speed=128;
 8000408:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <main+0x1c4>)
 800040a:	2280      	movs	r2, #128	@ 0x80
 800040c:	701a      	strb	r2, [r3, #0]
          }
          SendSingleValue(0x08, speed, direction);
 800040e:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <main+0x1c4>)
 8000410:	7819      	ldrb	r1, [r3, #0]
 8000412:	2316      	movs	r3, #22
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b29b      	uxth	r3, r3
 800041a:	001a      	movs	r2, r3
 800041c:	2008      	movs	r0, #8
 800041e:	f000 fdbb 	bl	8000f98 <SendSingleValue>



          DelayWithTimer(15); // Delay before the next cycle
 8000422:	200f      	movs	r0, #15
 8000424:	f000 fadc 	bl	80009e0 <DelayWithTimer>
          read_sensors();
 8000428:	e764      	b.n	80002f4 <main+0x74>
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	02040103 	.word	0x02040103
 8000430:	40002000 	.word	0x40002000
 8000434:	2000003b 	.word	0x2000003b
 8000438:	20000028 	.word	0x20000028
 800043c:	20000038 	.word	0x20000038
 8000440:	2000003c 	.word	0x2000003c
 8000444:	20000049 	.word	0x20000049

08000448 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)

{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;                      // Enable HSI
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <SystemClock_Config+0x30>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <SystemClock_Config+0x30>)
 8000452:	2101      	movs	r1, #1
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));           // Wait until HSI is ready
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	4b07      	ldr	r3, [pc, #28]	@ (8000478 <SystemClock_Config+0x30>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2202      	movs	r2, #2
 8000460:	4013      	ands	r3, r2
 8000462:	d0fa      	beq.n	800045a <SystemClock_Config+0x12>

    RCC->CFGR = RCC_CFGR_SW_HSI;                  // Select HSI as system clock
 8000464:	4b04      	ldr	r3, [pc, #16]	@ (8000478 <SystemClock_Config+0x30>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 |             // AHB prescaler
 800046a:	4a03      	ldr	r2, [pc, #12]	@ (8000478 <SystemClock_Config+0x30>)
 800046c:	4b02      	ldr	r3, [pc, #8]	@ (8000478 <SystemClock_Config+0x30>)
 800046e:	6852      	ldr	r2, [r2, #4]
 8000470:	605a      	str	r2, [r3, #4]
                 RCC_CFGR_PPRE_DIV1;              // APB1 prescaler
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000

0800047c <MX_ADC_Init>:
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)

{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;           // Enable ADC1 clock
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_ADC_Init+0x58>)
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <MX_ADC_Init+0x58>)
 8000486:	2180      	movs	r1, #128	@ 0x80
 8000488:	0089      	lsls	r1, r1, #2
 800048a:	430a      	orrs	r2, r1
 800048c:	619a      	str	r2, [r3, #24]
    ADC1->CR = 0;                                 // Reset control register
 800048e:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <MX_ADC_Init+0x5c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
    ADC1->CFGR1 = 0;                              // Reset configuration register
 8000494:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <MX_ADC_Init+0x5c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]

    // Set resolution to 12-bit (reset state, no action needed as 12-bit is default)
    // Configure sampling time to 1.5 cycles
    ADC1->SMPR = 0x0;                             // Set sampling time to 1.5 ADC clock cycles (default)
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <MX_ADC_Init+0x5c>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]

    ADC1->CHSELR = ADC_CHSELR_CHSEL0;             // Select channel 0
 80004a0:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <MX_ADC_Init+0x5c>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	629a      	str	r2, [r3, #40]	@ 0x28
    ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;              // Right data alignment (default)
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_ADC_Init+0x5c>)
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <MX_ADC_Init+0x5c>)
 80004ac:	2120      	movs	r1, #32
 80004ae:	438a      	bics	r2, r1
 80004b0:	60da      	str	r2, [r3, #12]

    ADC1->CR |= ADC_CR_ADEN;                      // Enable ADC
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_ADC_Init+0x5c>)
 80004b4:	689a      	ldr	r2, [r3, #8]
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_ADC_Init+0x5c>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));         // Wait for ADC to be ready
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <MX_ADC_Init+0x5c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4013      	ands	r3, r2
 80004c8:	d0fa      	beq.n	80004c0 <MX_ADC_Init+0x44>
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40012400 	.word	0x40012400

080004dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */

    /* USER CODE END I2C1_Init 0 */

    /* Enable clock for GPIOA and I2C1 peripherals */
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  // Enable GPIOA clock
 80004e0:	4b45      	ldr	r3, [pc, #276]	@ (80005f8 <MX_I2C1_Init+0x11c>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	4b44      	ldr	r3, [pc, #272]	@ (80005f8 <MX_I2C1_Init+0x11c>)
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	0289      	lsls	r1, r1, #10
 80004ea:	430a      	orrs	r2, r1
 80004ec:	615a      	str	r2, [r3, #20]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // Enable I2C1 clock
 80004ee:	4b42      	ldr	r3, [pc, #264]	@ (80005f8 <MX_I2C1_Init+0x11c>)
 80004f0:	69da      	ldr	r2, [r3, #28]
 80004f2:	4b41      	ldr	r3, [pc, #260]	@ (80005f8 <MX_I2C1_Init+0x11c>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0389      	lsls	r1, r1, #14
 80004f8:	430a      	orrs	r2, r1
 80004fa:	61da      	str	r2, [r3, #28]

    /* Configure GPIOA for I2C1_SCL (PA9) and I2C1_SDA (PA10) */
    GPIOA->MODER &= ~((3U << (2 * 9)) | (3U << (2 * 10)));  // Clear mode bits for PA9 and PA10
 80004fc:	2390      	movs	r3, #144	@ 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	2390      	movs	r3, #144	@ 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	493d      	ldr	r1, [pc, #244]	@ (80005fc <MX_I2C1_Init+0x120>)
 8000508:	400a      	ands	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= ((2U << (2 * 9)) | (2U << (2 * 10)));   // Set mode to Alternate Function
 800050c:	2390      	movs	r3, #144	@ 0x90
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	2390      	movs	r3, #144	@ 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	21a0      	movs	r1, #160	@ 0xa0
 8000518:	0389      	lsls	r1, r1, #14
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]

    GPIOA->OTYPER |= (1U << 9) | (1U << 10);  // Set output type to Open-Drain for PA9 and PA10
 800051e:	2390      	movs	r3, #144	@ 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	2390      	movs	r3, #144	@ 0x90
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	21c0      	movs	r1, #192	@ 0xc0
 800052a:	00c9      	lsls	r1, r1, #3
 800052c:	430a      	orrs	r2, r1
 800052e:	605a      	str	r2, [r3, #4]

    GPIOA->OSPEEDR |= ((3U << (2 * 9)) | (3U << (2 * 10))); // Set speed to High for PA9 and PA10
 8000530:	2390      	movs	r3, #144	@ 0x90
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	689a      	ldr	r2, [r3, #8]
 8000536:	2390      	movs	r3, #144	@ 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	21f0      	movs	r1, #240	@ 0xf0
 800053c:	0389      	lsls	r1, r1, #14
 800053e:	430a      	orrs	r2, r1
 8000540:	609a      	str	r2, [r3, #8]

    GPIOA->PUPDR &= ~((3U << (2 * 9)) | (3U << (2 * 10)));  // No pull-up, no pull-down for PA9 and PA10
 8000542:	2390      	movs	r3, #144	@ 0x90
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	2390      	movs	r3, #144	@ 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	492b      	ldr	r1, [pc, #172]	@ (80005fc <MX_I2C1_Init+0x120>)
 800054e:	400a      	ands	r2, r1
 8000550:	60da      	str	r2, [r3, #12]

    GPIOA->AFR[1] &= ~((0xFU << (4 * (9 - 8))) | (0xFU << (4 * (10 - 8))));  // Clear alternate function bits
 8000552:	2390      	movs	r3, #144	@ 0x90
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000558:	2390      	movs	r3, #144	@ 0x90
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	4928      	ldr	r1, [pc, #160]	@ (8000600 <MX_I2C1_Init+0x124>)
 800055e:	400a      	ands	r2, r1
 8000560:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFR[1] |= ((4U << (4 * (9 - 8))) | (4U << (4 * (10 - 8))));       // Set AF4 (I2C1) for PA9 and PA10
 8000562:	2390      	movs	r3, #144	@ 0x90
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000568:	2390      	movs	r3, #144	@ 0x90
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	2188      	movs	r1, #136	@ 0x88
 800056e:	00c9      	lsls	r1, r1, #3
 8000570:	430a      	orrs	r2, r1
 8000572:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure I2C1 */
    I2C1->CR1 &= ~I2C_CR1_PE;  // Disable I2C1 to configure it
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <MX_I2C1_Init+0x128>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <MX_I2C1_Init+0x128>)
 800057a:	2101      	movs	r1, #1
 800057c:	438a      	bics	r2, r1
 800057e:	601a      	str	r2, [r3, #0]

    I2C1->TIMINGR = 0x2000090E; // Configure timing for 100 kHz (assuming HSI clock at 8 MHz)
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_I2C1_Init+0x128>)
 8000582:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <MX_I2C1_Init+0x12c>)
 8000584:	611a      	str	r2, [r3, #16]

    I2C1->CR1 &= ~I2C_CR1_NOSTRETCH; // Enable clock stretching
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <MX_I2C1_Init+0x128>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <MX_I2C1_Init+0x128>)
 800058c:	491f      	ldr	r1, [pc, #124]	@ (800060c <MX_I2C1_Init+0x130>)
 800058e:	400a      	ands	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_GCEN;      // Disable general call mode
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <MX_I2C1_Init+0x128>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <MX_I2C1_Init+0x128>)
 8000598:	491d      	ldr	r1, [pc, #116]	@ (8000610 <MX_I2C1_Init+0x134>)
 800059a:	400a      	ands	r2, r1
 800059c:	601a      	str	r2, [r3, #0]

    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;   // Disable own address 1
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005a0:	689a      	ldr	r2, [r3, #8]
 80005a2:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005a4:	491b      	ldr	r1, [pc, #108]	@ (8000614 <MX_I2C1_Init+0x138>)
 80005a6:	400a      	ands	r2, r1
 80005a8:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 = (0 << 1) | I2C_OAR1_OA1MODE; // Configure own address 1 to 7-bit mode and set address to 0x00
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	00d2      	lsls	r2, r2, #3
 80005b0:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 |= I2C_OAR1_OA1EN;    // Enable own address 1
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005b8:	2180      	movs	r1, #128	@ 0x80
 80005ba:	0209      	lsls	r1, r1, #8
 80005bc:	430a      	orrs	r2, r1
 80005be:	609a      	str	r2, [r3, #8]

    I2C1->OAR2 &= ~I2C_OAR2_OA2EN;   // Disable own address 2
 80005c0:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005c2:	68da      	ldr	r2, [r3, #12]
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005c6:	4913      	ldr	r1, [pc, #76]	@ (8000614 <MX_I2C1_Init+0x138>)
 80005c8:	400a      	ands	r2, r1
 80005ca:	60da      	str	r2, [r3, #12]

    I2C1->CR2 &= ~I2C_CR2_ADD10;     // Use 7-bit addressing mode for slave address
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005d2:	4911      	ldr	r1, [pc, #68]	@ (8000618 <MX_I2C1_Init+0x13c>)
 80005d4:	400a      	ands	r2, r1
 80005d6:	605a      	str	r2, [r3, #4]
    I2C1->CR2 |= I2C_CR2_AUTOEND;    // Enable AUTOEND (automatic STOP condition)
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005de:	2180      	movs	r1, #128	@ 0x80
 80005e0:	0489      	lsls	r1, r1, #18
 80005e2:	430a      	orrs	r2, r1
 80005e4:	605a      	str	r2, [r3, #4]

    I2C1->CR1 |= I2C_CR1_PE;         // Enable I2C1 peripheral
 80005e6:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_I2C1_Init+0x128>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	ffc3ffff 	.word	0xffc3ffff
 8000600:	fffff00f 	.word	0xfffff00f
 8000604:	40005400 	.word	0x40005400
 8000608:	2000090e 	.word	0x2000090e
 800060c:	fffdffff 	.word	0xfffdffff
 8000610:	fff7ffff 	.word	0xfff7ffff
 8000614:	ffff7fff 	.word	0xffff7fff
 8000618:	fffff7ff 	.word	0xfffff7ff

0800061c <MX_TIM14_Init>:
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)

{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // Enable the clock for TIM14
    RCC->APB1ENR |= RCC_APB1ENR_TIM14EN; // TIM14 clock enable
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_TIM14_Init+0x54>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_TIM14_Init+0x54>)
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	0049      	lsls	r1, r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	61da      	str	r2, [r3, #28]

    // Reset TIM14 configuration
    TIM14->CR1 = 0; // Clear control register
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
    TIM14->CNT = 0; // Reset counter
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	@ 0x24

    // Configure Prescaler
    TIM14->PSC = 7999; // Set prescaler for 1 kHz timer clock (assuming 8 MHz system clock)
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_TIM14_Init+0x58>)
 800063c:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <MX_TIM14_Init+0x5c>)
 800063e:	629a      	str	r2, [r3, #40]	@ 0x28

    // Configure Counter Mode (Up)
    TIM14->CR1 &= ~TIM_CR1_DIR; // Ensure up-counting mode (DIR = 0)
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000646:	2110      	movs	r1, #16
 8000648:	438a      	bics	r2, r1
 800064a:	601a      	str	r2, [r3, #0]

    // Configure Period (Auto-Reload Register)
    TIM14->ARR = 999; // Set period for 1 ms increment (1 kHz timer clock)
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_TIM14_Init+0x58>)
 800064e:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <MX_TIM14_Init+0x60>)
 8000650:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set Clock Division (DIV1)
    TIM14->CR1 &= ~TIM_CR1_CKD; // Set clock division to 1 (CKD = 00)
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000658:	4909      	ldr	r1, [pc, #36]	@ (8000680 <MX_TIM14_Init+0x64>)
 800065a:	400a      	ands	r2, r1
 800065c:	601a      	str	r2, [r3, #0]

    // Enable the Counter
    TIM14->CR1 |= TIM_CR1_CEN; // Start the counter (CEN = 1)
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <MX_TIM14_Init+0x58>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	40002000 	.word	0x40002000
 8000678:	00001f3f 	.word	0x00001f3f
 800067c:	000003e7 	.word	0x000003e7
 8000680:	fffffcff 	.word	0xfffffcff

08000684 <MX_TIM16_Init>:



//TIMMER16

static void MX_TIM16_Init(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    // Enable the TIM16 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_TIM16_Init+0x60>)
 800068a:	699a      	ldr	r2, [r3, #24]
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_TIM16_Init+0x60>)
 800068e:	2180      	movs	r1, #128	@ 0x80
 8000690:	0289      	lsls	r1, r1, #10
 8000692:	430a      	orrs	r2, r1
 8000694:	619a      	str	r2, [r3, #24]

    // Reset TIM16 configuration
    TIM16->CR1 = 0x0000;       // Clear control register
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_TIM16_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
    TIM16->CNT = 0x0000;       // Reset counter
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_TIM16_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM16->PSC = 7999;         // Prescaler for 1 ms time base (8 MHz clock / (PSC + 1))
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006a4:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <MX_TIM16_Init+0x68>)
 80006a6:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM16->ARR = 5000;         // Auto-reload value for 5000 ms
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006aa:	4a11      	ldr	r2, [pc, #68]	@ (80006f0 <MX_TIM16_Init+0x6c>)
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM16->CR1 |= TIM_CR1_DIR; // Down-counting mode
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006b4:	2110      	movs	r1, #16
 80006b6:	430a      	orrs	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
    TIM16->CR1 |= TIM_CR1_OPM; // One-pulse mode (counter stops at 0)
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006c0:	2108      	movs	r1, #8
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]
    TIM16->CR1 &= ~TIM_CR1_CKD; // No clock division
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006cc:	4909      	ldr	r1, [pc, #36]	@ (80006f4 <MX_TIM16_Init+0x70>)
 80006ce:	400a      	ands	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]

    // Enable the timer (initially stopped)
    TIM16->CR1 &= ~TIM_CR1_CEN;
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4b04      	ldr	r3, [pc, #16]	@ (80006e8 <MX_TIM16_Init+0x64>)
 80006d8:	2101      	movs	r1, #1
 80006da:	438a      	bics	r2, r1
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40014400 	.word	0x40014400
 80006ec:	00001f3f 	.word	0x00001f3f
 80006f0:	00001388 	.word	0x00001388
 80006f4:	fffffcff 	.word	0xfffffcff

080006f8 <MX_USART1_UART_Init>:
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)

{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    // Enable clock for USART1 and GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_USART1_UART_Init+0xa4>)
 80006fe:	699a      	ldr	r2, [r3, #24]
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_USART1_UART_Init+0xa4>)
 8000702:	2180      	movs	r1, #128	@ 0x80
 8000704:	01c9      	lsls	r1, r1, #7
 8000706:	430a      	orrs	r2, r1
 8000708:	619a      	str	r2, [r3, #24]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800070a:	4b24      	ldr	r3, [pc, #144]	@ (800079c <MX_USART1_UART_Init+0xa4>)
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_USART1_UART_Init+0xa4>)
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	0289      	lsls	r1, r1, #10
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]

    // Configure GPIOA: PA2 (TX) as Alternate Function
    GPIOA->MODER &= ~(3U << (2 * 2));  // Clear MODER for PA2
 8000718:	2390      	movs	r3, #144	@ 0x90
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2390      	movs	r3, #144	@ 0x90
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	2130      	movs	r1, #48	@ 0x30
 8000724:	438a      	bics	r2, r1
 8000726:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (2 * 2));   // Set MODER to Alternate Function
 8000728:	2390      	movs	r3, #144	@ 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	2390      	movs	r3, #144	@ 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	2120      	movs	r1, #32
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1U << (4 * 2));  // Set AF1 (USART1_TX) for PA2
 8000738:	2390      	movs	r3, #144	@ 0x90
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	6a1a      	ldr	r2, [r3, #32]
 800073e:	2390      	movs	r3, #144	@ 0x90
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2180      	movs	r1, #128	@ 0x80
 8000744:	0049      	lsls	r1, r1, #1
 8000746:	430a      	orrs	r2, r1
 8000748:	621a      	str	r2, [r3, #32]

    // Configure GPIOA: PA3 (RX) as Alternate Function
    GPIOA->MODER &= ~(3U << (3 * 2));  // Clear MODER for PA3
 800074a:	2390      	movs	r3, #144	@ 0x90
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2390      	movs	r3, #144	@ 0x90
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	21c0      	movs	r1, #192	@ 0xc0
 8000756:	438a      	bics	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (3 * 2));   // Set MODER to Alternate Function
 800075a:	2390      	movs	r3, #144	@ 0x90
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	2390      	movs	r3, #144	@ 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2180      	movs	r1, #128	@ 0x80
 8000766:	430a      	orrs	r2, r1
 8000768:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1U << (4 * 3));  // Set AF1 (USART1_RX) for PA3
 800076a:	2390      	movs	r3, #144	@ 0x90
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	2390      	movs	r3, #144	@ 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	0149      	lsls	r1, r1, #5
 8000778:	430a      	orrs	r2, r1
 800077a:	621a      	str	r2, [r3, #32]

    // Configure USART1: 9600 baud, 8N1 (1 stop bit, no parity)
    USART1->BRR = 8000000 / 38400; // Assuming 48 MHz clock
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART1_UART_Init+0xa8>)
 800077e:	22d0      	movs	r2, #208	@ 0xd0
 8000780:	60da      	str	r2, [r3, #12]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE; // Enable Transmitter and Receiver
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_USART1_UART_Init+0xa8>)
 8000784:	220c      	movs	r2, #12
 8000786:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_UE;               // Enable USART
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <MX_USART1_UART_Init+0xa8>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <MX_USART1_UART_Init+0xa8>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	003b      	movs	r3, r7
 80007ac:	0018      	movs	r0, r3
 80007ae:	2318      	movs	r3, #24
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f000 fdda 	bl	800136c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	03db      	lsls	r3, r3, #15
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fd11 	bl	80001e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	029b      	lsls	r3, r3, #10
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd0c 	bl	80001e4 <LL_AHB1_GRP1_EnableClock>

  /**/


  /**/
  LL_GPIO_ResetOutputPin(C_GPIO_Port, C_Pin);
 80007cc:	2390      	movs	r3, #144	@ 0x90
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2120      	movs	r1, #32
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff fd48 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(B_GPIO_Port, B_Pin);
 80007d8:	2390      	movs	r3, #144	@ 0x90
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2140      	movs	r1, #64	@ 0x40
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff fd42 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(A_GPIO_Port, A_Pin);
 80007e4:	2390      	movs	r3, #144	@ 0x90
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fd3c 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signal_right_GPIO_Port, signal_right_Pin);
 80007f0:	2390      	movs	r3, #144	@ 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	2102      	movs	r1, #2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fd36 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signal_left_GPIO_Port, signal_left_Pin);
 80007fc:	2390      	movs	r3, #144	@ 0x90
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2110      	movs	r1, #16
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fd30 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/


  /**/
  GPIO_InitStruct.Pin = C_Pin;
 8000808:	003b      	movs	r3, r7
 800080a:	2220      	movs	r2, #32
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080e:	003b      	movs	r3, r7
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000814:	003b      	movs	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800081a:	003b      	movs	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000820:	003b      	movs	r3, r7
 8000822:	2202      	movs	r2, #2
 8000824:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(C_GPIO_Port, &GPIO_InitStruct);
 8000826:	003a      	movs	r2, r7
 8000828:	2390      	movs	r3, #144	@ 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd40 	bl	80012b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B_Pin;
 8000834:	003b      	movs	r3, r7
 8000836:	2240      	movs	r2, #64	@ 0x40
 8000838:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800083a:	003b      	movs	r3, r7
 800083c:	2201      	movs	r2, #1
 800083e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800084c:	003b      	movs	r3, r7
 800084e:	2202      	movs	r2, #2
 8000850:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8000852:	003a      	movs	r2, r7
 8000854:	2390      	movs	r3, #144	@ 0x90
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	0011      	movs	r1, r2
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fd2a 	bl	80012b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A_Pin;
 8000860:	003b      	movs	r3, r7
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000866:	003b      	movs	r3, r7
 8000868:	2201      	movs	r2, #1
 800086a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800086c:	003b      	movs	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000872:	003b      	movs	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000878:	003b      	movs	r3, r7
 800087a:	2202      	movs	r2, #2
 800087c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 800087e:	003a      	movs	r2, r7
 8000880:	2390      	movs	r3, #144	@ 0x90
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fd14 	bl	80012b4 <LL_GPIO_Init>

  /**/


  GPIO_InitStruct.Pin = signal_right_Pin;
 800088c:	003b      	movs	r3, r7
 800088e:	2202      	movs	r2, #2
 8000890:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000892:	003b      	movs	r3, r7
 8000894:	2201      	movs	r2, #1
 8000896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800089e:	003b      	movs	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signal_right_GPIO_Port, &GPIO_InitStruct);
 80008aa:	003a      	movs	r2, r7
 80008ac:	2390      	movs	r3, #144	@ 0x90
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fcfe 	bl	80012b4 <LL_GPIO_Init>
  /**/




  GPIO_InitStruct.Pin = signal_left_Pin;
 80008b8:	003b      	movs	r3, r7
 80008ba:	2210      	movs	r2, #16
 80008bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008be:	003b      	movs	r3, r7
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signal_left_GPIO_Port, &GPIO_InitStruct);
 80008d6:	003a      	movs	r2, r7
 80008d8:	2390      	movs	r3, #144	@ 0x90
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	0011      	movs	r1, r2
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fce8 	bl	80012b4 <LL_GPIO_Init>



/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b006      	add	sp, #24
 80008ea:	bd80      	pop	{r7, pc}

080008ec <I2C_Send_Buffer>:
  * @param slave_address I2C slave address
  * @param data Pointer to the data buffer
  * @param size Size of the data buffer
  */
void I2C_Send_Buffer(uint8_t slave_address, uint8_t *data, uint16_t size)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6039      	str	r1, [r7, #0]
 80008f4:	0011      	movs	r1, r2
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	1c02      	adds	r2, r0, #0
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	801a      	strh	r2, [r3, #0]
    /* Wait until I2C is not busy */
    while (I2C1->ISR & I2C_ISR_BUSY);
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <I2C_Send_Buffer+0x94>)
 8000906:	699a      	ldr	r2, [r3, #24]
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	4013      	ands	r3, r2
 800090e:	d1f9      	bne.n	8000904 <I2C_Send_Buffer+0x18>

    /* Configure the slave address and the number of bytes to transfer */
    I2C1->CR2 = (slave_address << 1) |    // Set slave address (7-bit left aligned)
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	005a      	lsls	r2, r3, #1
                (size << 16) |            // Set number of bytes to transfer
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	041b      	lsls	r3, r3, #16
    I2C1->CR2 = (slave_address << 1) |    // Set slave address (7-bit left aligned)
 800091c:	4313      	orrs	r3, r2
 800091e:	0019      	movs	r1, r3
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <I2C_Send_Buffer+0x94>)
                I2C_CR2_START |           // Generate START condition
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <I2C_Send_Buffer+0x98>)
 8000924:	430a      	orrs	r2, r1
    I2C1->CR2 = (slave_address << 1) |    // Set slave address (7-bit left aligned)
 8000926:	605a      	str	r2, [r3, #4]
                I2C_CR2_AUTOEND;          // Enable AUTOEND (STOP condition automatically after N bytes)

    /* Transmit the data */
    for (uint16_t i = 0; i < size; i++)
 8000928:	230e      	movs	r3, #14
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e012      	b.n	8000958 <I2C_Send_Buffer+0x6c>
    {
        /* Wait until TXIS (Transmit Interrupt Status) is set */

    	while (!(I2C1->ISR & I2C_ISR_TXIS));
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <I2C_Send_Buffer+0x94>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2202      	movs	r2, #2
 800093a:	4013      	ands	r3, r2
 800093c:	d0fa      	beq.n	8000934 <I2C_Send_Buffer+0x48>

        /* Write the data to the transmit data register */
        I2C1->TXDR = data[i];
 800093e:	210e      	movs	r1, #14
 8000940:	187b      	adds	r3, r7, r1
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	18d3      	adds	r3, r2, r3
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <I2C_Send_Buffer+0x94>)
 800094c:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint16_t i = 0; i < size; i++)
 800094e:	187b      	adds	r3, r7, r1
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	187b      	adds	r3, r7, r1
 8000954:	3201      	adds	r2, #1
 8000956:	801a      	strh	r2, [r3, #0]
 8000958:	230e      	movs	r3, #14
 800095a:	18fa      	adds	r2, r7, r3
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	8812      	ldrh	r2, [r2, #0]
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	429a      	cmp	r2, r3
 8000964:	d3e5      	bcc.n	8000932 <I2C_Send_Buffer+0x46>
    }

    /* Wait until the STOP condition is generated */
    while (!(I2C1->ISR & I2C_ISR_STOPF));
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <I2C_Send_Buffer+0x94>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	2220      	movs	r2, #32
 800096e:	4013      	ands	r3, r2
 8000970:	d0fa      	beq.n	8000968 <I2C_Send_Buffer+0x7c>

    /* Clear the STOP flag */
    I2C1->ICR = I2C_ICR_STOPCF;
 8000972:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <I2C_Send_Buffer+0x94>)
 8000974:	2220      	movs	r2, #32
 8000976:	61da      	str	r2, [r3, #28]
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40005400 	.word	0x40005400
 8000984:	02002000 	.word	0x02002000

08000988 <SetControlPins>:



bool SetControlPins(uint8_t code)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	0002      	movs	r2, r0
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	701a      	strb	r2, [r3, #0]
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2201      	movs	r2, #1
 800099a:	4013      	ands	r3, r2
 800099c:	d001      	beq.n	80009a2 <SetControlPins+0x1a>
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	e001      	b.n	80009a6 <SetControlPins+0x1e>
 80009a2:	2380      	movs	r3, #128	@ 0x80
 80009a4:	041a      	lsls	r2, r3, #16
                  (code & 0x02 ? B_Pin : (uint32_t) B_Pin << 16U) |
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2102      	movs	r1, #2
 80009ac:	400b      	ands	r3, r1
 80009ae:	d001      	beq.n	80009b4 <SetControlPins+0x2c>
 80009b0:	2340      	movs	r3, #64	@ 0x40
 80009b2:	e001      	b.n	80009b8 <SetControlPins+0x30>
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	03db      	lsls	r3, r3, #15
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 80009b8:	431a      	orrs	r2, r3
 80009ba:	0011      	movs	r1, r2
                  (code & 0x04 ? C_Pin : (uint32_t) C_Pin << 16U);
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2204      	movs	r2, #4
 80009c2:	4013      	ands	r3, r2
 80009c4:	d001      	beq.n	80009ca <SetControlPins+0x42>
 80009c6:	2220      	movs	r2, #32
 80009c8:	e001      	b.n	80009ce <SetControlPins+0x46>
 80009ca:	2380      	movs	r3, #128	@ 0x80
 80009cc:	039a      	lsls	r2, r3, #14
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 80009ce:	2390      	movs	r3, #144	@ 0x90
 80009d0:	05db      	lsls	r3, r3, #23
                  (code & 0x02 ? B_Pin : (uint32_t) B_Pin << 16U) |
 80009d2:	430a      	orrs	r2, r1
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 80009d4:	619a      	str	r2, [r3, #24]
    return true;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <DelayWithTimer>:

void DelayWithTimer(uint32_t ms)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    TIM14->CNT = 0;                               // Reset counter
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <DelayWithTimer+0x24>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM14->CNT < ms);                      // Wait for counter to reach ms
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <DelayWithTimer+0x24>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d8fa      	bhi.n	80009f0 <DelayWithTimer+0x10>
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40002000 	.word	0x40002000

08000a08 <go>:

}//end of makeTurn()



void go(uint8_t max_x, uint8_t direction_x){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	1c0a      	adds	r2, r1, #0
 8000a18:	701a      	strb	r2, [r3, #0]

	 *
	 */


	for(uint8_t x=0 ;x< max_x; x++ ){
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e015      	b.n	8000a50 <go+0x48>

	 SendSingleValue(0x08, 128, direction_x);
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f000 fab2 	bl	8000f98 <SendSingleValue>
	 DelayWithTimer(100);
 8000a34:	2064      	movs	r0, #100	@ 0x64
 8000a36:	f7ff ffd3 	bl	80009e0 <DelayWithTimer>
	 SendSingleValue(0x08, 128, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	2008      	movs	r0, #8
 8000a40:	f000 faaa 	bl	8000f98 <SendSingleValue>
	for(uint8_t x=0 ;x< max_x; x++ ){
 8000a44:	210f      	movs	r1, #15
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	3201      	adds	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fa      	adds	r2, r7, r3
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3e2      	bcc.n	8000a24 <go+0x1c>

	}

}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b004      	add	sp, #16
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <read_sensors>:

void read_sensors() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
    for (uint8_t code = 0; code < 8; code++) {
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e02a      	b.n	8000acc <read_sensors+0x64>
        if (SetControlPins(code)) {
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff ff84 	bl	8000988 <SetControlPins>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d01e      	beq.n	8000ac2 <read_sensors+0x5a>
            // Start ADC conversion
             ADC1->CR |= ADC_CR_ADSTART;
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <read_sensors+0x78>)
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <read_sensors+0x78>)
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	609a      	str	r2, [r3, #8]

            // Wait for conversion to complete
            while (!(ADC1->ISR & ADC_ISR_EOC));
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <read_sensors+0x78>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2204      	movs	r2, #4
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d0fa      	beq.n	8000a92 <read_sensors+0x2a>
            //uint16_t adcValue = ADC1->DR;

            // Store the raw ADC value in the sensor_data array

            //convertadc to bin
            uint8_t adcValue = (ADC1->DR > 1000) ? 1 : 0; // Threshold ADC value to 1 or 0
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <read_sensors+0x78>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	22fa      	movs	r2, #250	@ 0xfa
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	419b      	sbcs	r3, r3
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	1dbb      	adds	r3, r7, #6
 8000aae:	701a      	strb	r2, [r3, #0]


            sensor_data[code] = adcValue;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <read_sensors+0x7c>)
 8000ab6:	1db9      	adds	r1, r7, #6
 8000ab8:	7809      	ldrb	r1, [r1, #0]
 8000aba:	54d1      	strb	r1, [r2, r3]

            // Small delay for stability
            DelayWithTimer(5);
 8000abc:	2005      	movs	r0, #5
 8000abe:	f7ff ff8f 	bl	80009e0 <DelayWithTimer>
    for (uint8_t code = 0; code < 8; code++) {
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	3201      	adds	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d9d0      	bls.n	8000a76 <read_sensors+0xe>
        }
    }
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	40012400 	.word	0x40012400
 8000ae4:	2000001c 	.word	0x2000001c

08000ae8 <line_process>:
uint8_t helper[2] = {0, 0};  // helper[0] = RIGHT used, helper[1] = LEFT used

uint8_t line_process() {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
    // Assign sensor data to logical variables
    uint8_t left_line = sensor_data[0];
 8000aee:	1dbb      	adds	r3, r7, #6
 8000af0:	4a7f      	ldr	r2, [pc, #508]	@ (8000cf0 <line_process+0x208>)
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	701a      	strb	r2, [r3, #0]
    uint8_t mid_line = sensor_data[4];
 8000af6:	1d7b      	adds	r3, r7, #5
 8000af8:	4a7d      	ldr	r2, [pc, #500]	@ (8000cf0 <line_process+0x208>)
 8000afa:	7912      	ldrb	r2, [r2, #4]
 8000afc:	701a      	strb	r2, [r3, #0]
    uint8_t right_line = sensor_data[6];
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4a7b      	ldr	r2, [pc, #492]	@ (8000cf0 <line_process+0x208>)
 8000b02:	7992      	ldrb	r2, [r2, #6]
 8000b04:	701a      	strb	r2, [r3, #0]

    // Default direction is STOP
    uint8_t direction = 0;
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]


    if (mid_line) {
 8000b0c:	1d7b      	adds	r3, r7, #5
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d045      	beq.n	8000ba0 <line_process+0xb8>
    	// Middle sensor is on the line
        if (left_line && right_line) {
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d013      	beq.n	8000b44 <line_process+0x5c>
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00f      	beq.n	8000b44 <line_process+0x5c>
            // All sensors are active -> Stop
        	CROSS++;
 8000b24:	4b73      	ldr	r3, [pc, #460]	@ (8000cf4 <line_process+0x20c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b71      	ldr	r3, [pc, #452]	@ (8000cf4 <line_process+0x20c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
            direction = 0;  // STOP
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000b36:	4b70      	ldr	r3, [pc, #448]	@ (8000cf8 <line_process+0x210>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000b3c:	4b6e      	ldr	r3, [pc, #440]	@ (8000cf8 <line_process+0x210>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	705a      	strb	r2, [r3, #1]
 8000b42:	e0a5      	b.n	8000c90 <line_process+0x1a8>
        } else if (left_line && !right_line) {
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00d      	beq.n	8000b68 <line_process+0x80>
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <line_process+0x80>
            // Middle and Left sensors active -> Adjust slightly left
            direction = 5;  // A LITTLE TO LEFT
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	2205      	movs	r2, #5
 8000b58:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000b5a:	4b67      	ldr	r3, [pc, #412]	@ (8000cf8 <line_process+0x210>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000b60:	4b65      	ldr	r3, [pc, #404]	@ (8000cf8 <line_process+0x210>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	705a      	strb	r2, [r3, #1]
 8000b66:	e093      	b.n	8000c90 <line_process+0x1a8>
        } else if (right_line && !left_line) {
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00d      	beq.n	8000b8c <line_process+0xa4>
 8000b70:	1dbb      	adds	r3, r7, #6
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <line_process+0xa4>
            // Middle and Right sensors active -> Adjust slightly right
            direction = 4;  // A LITTLE TO RIGHT
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf8 <line_process+0x210>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000b84:	4b5c      	ldr	r3, [pc, #368]	@ (8000cf8 <line_process+0x210>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	705a      	strb	r2, [r3, #1]
 8000b8a:	e081      	b.n	8000c90 <line_process+0x1a8>
        } else {
            // Only Middle sensor active -> Go Forward
            direction = 1;  // FORWARD
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000b92:	4b59      	ldr	r3, [pc, #356]	@ (8000cf8 <line_process+0x210>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000b98:	4b57      	ldr	r3, [pc, #348]	@ (8000cf8 <line_process+0x210>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	705a      	strb	r2, [r3, #1]
 8000b9e:	e077      	b.n	8000c90 <line_process+0x1a8>
        }
    } else {  // Middle sensor is off the line
        if (left_line && !right_line) {
 8000ba0:	1dbb      	adds	r3, r7, #6
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00d      	beq.n	8000bc4 <line_process+0xdc>
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <line_process+0xdc>
            // Line is on the left -> Turn left
            direction = 3;  // LEFT
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000bb6:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <line_process+0x210>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf8 <line_process+0x210>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	705a      	strb	r2, [r3, #1]
 8000bc2:	e065      	b.n	8000c90 <line_process+0x1a8>
        } else if (right_line && !left_line) {
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00d      	beq.n	8000be8 <line_process+0x100>
 8000bcc:	1dbb      	adds	r3, r7, #6
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <line_process+0x100>
            // Line is on the right -> Turn right
            direction = 2;  // RIGHT
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <line_process+0x210>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000be0:	4b45      	ldr	r3, [pc, #276]	@ (8000cf8 <line_process+0x210>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	705a      	strb	r2, [r3, #1]
 8000be6:	e053      	b.n	8000c90 <line_process+0x1a8>
        } else if (!left_line && !right_line) {
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d144      	bne.n	8000c7a <line_process+0x192>
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d140      	bne.n	8000c7a <line_process+0x192>



            // All sensors are off -> Alternate based on helper
            if (last_direction == 2 && helper[1] == 0) {
 8000bf8:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <line_process+0x214>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d10e      	bne.n	8000c1e <line_process+0x136>
 8000c00:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <line_process+0x210>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10a      	bne.n	8000c1e <line_process+0x136>
                direction = 2;  // Guess LEFT
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	701a      	strb	r2, [r3, #0]
                go(1,2);
 8000c0e:	2102      	movs	r1, #2
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff fef9 	bl	8000a08 <go>
                helper[1] = 1;  // Mark RIGHT as used
 8000c16:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <line_process+0x210>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	705a      	strb	r2, [r3, #1]
 8000c1c:	e02c      	b.n	8000c78 <line_process+0x190>
            }

             else if (last_direction == 3 && helper[0] == 0) {
 8000c1e:	4b37      	ldr	r3, [pc, #220]	@ (8000cfc <line_process+0x214>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d10e      	bne.n	8000c44 <line_process+0x15c>
 8000c26:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <line_process+0x210>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <line_process+0x15c>
                direction = 3;  // Guess RIGHT
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
                go(1,3);
 8000c34:	2103      	movs	r1, #3
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fee6 	bl	8000a08 <go>
                helper[0] = 1;  // Mark LEFT as used
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <line_process+0x210>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e019      	b.n	8000c78 <line_process+0x190>
             }


             else if (helper[0] == 1 && helper[1] == 1) {
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <line_process+0x210>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d120      	bne.n	8000c8e <line_process+0x1a6>
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <line_process+0x210>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d11c      	bne.n	8000c8e <line_process+0x1a6>
                // Both directions used -> Stop
                direction = 0;  // STOP
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
                helper[0] = 0;  // Reset guesses
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <line_process+0x210>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
                helper[1] = 0;  // Reset guesses
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <line_process+0x210>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	705a      	strb	r2, [r3, #1]
                go(1,4);
 8000c66:	2104      	movs	r1, #4
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fecd 	bl	8000a08 <go>
                go(1,1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fec9 	bl	8000a08 <go>
            if (last_direction == 2 && helper[1] == 0) {
 8000c76:	e00a      	b.n	8000c8e <line_process+0x1a6>
 8000c78:	e009      	b.n	8000c8e <line_process+0x1a6>



        } else {
            // Unexpected case: Default to STOP
            direction = 0;  // STOP
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
            helper[0] = 0;  // Reset guesses
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <line_process+0x210>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
            helper[1] = 0;  // Reset guesses
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <line_process+0x210>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	705a      	strb	r2, [r3, #1]
 8000c8c:	e000      	b.n	8000c90 <line_process+0x1a8>
            if (last_direction == 2 && helper[1] == 0) {
 8000c8e:	46c0      	nop			@ (mov r8, r8)
        }
    }

    // Update last_direction for tracking
    if (direction != 6 && direction != 0) {  // Exclude STOP and BACK commands from direction memory
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b06      	cmp	r3, #6
 8000c96:	d007      	beq.n	8000ca8 <line_process+0x1c0>
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <line_process+0x1c0>
        last_direction = direction;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <line_process+0x214>)
 8000ca2:	1dfa      	adds	r2, r7, #7
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	701a      	strb	r2, [r3, #0]
    }

    if(helper[1] && !helper[0]){
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <line_process+0x210>)
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <line_process+0x1d6>
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <line_process+0x210>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <line_process+0x1d6>
    	last_direction=3;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <line_process+0x214>)
 8000cba:	2203      	movs	r2, #3
 8000cbc:	701a      	strb	r2, [r3, #0]
    } if( helper[0] && !helper[1]){
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <line_process+0x210>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <line_process+0x1ec>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <line_process+0x210>)
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <line_process+0x1ec>
    	last_direction=2;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <line_process+0x214>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	701a      	strb	r2, [r3, #0]
    } if(direction==0){
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <line_process+0x1fa>
    	last_direction=0;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <line_process+0x214>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]





    return direction;
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	2000001c 	.word	0x2000001c
 8000cf4:	20000048 	.word	0x20000048
 8000cf8:	2000004c 	.word	0x2000004c
 8000cfc:	20000024 	.word	0x20000024

08000d00 <data_process>:
uint8_t lastStateCK=0;
uint8_t lastStateDT=0;

uint8_t clockChanged=0;

void data_process() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
    // Attribute local names
    uint8_t data_left = sensor_data[3];
 8000d06:	4b97      	ldr	r3, [pc, #604]	@ (8000f64 <data_process+0x264>)
 8000d08:	78da      	ldrb	r2, [r3, #3]
 8000d0a:	1cfb      	adds	r3, r7, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
    uint8_t data_right = sensor_data[1];
 8000d0e:	4b95      	ldr	r3, [pc, #596]	@ (8000f64 <data_process+0x264>)
 8000d10:	785a      	ldrb	r2, [r3, #1]
 8000d12:	1cbb      	adds	r3, r7, #2
 8000d14:	701a      	strb	r2, [r3, #0]
    clockChanged=0;
 8000d16:	4b94      	ldr	r3, [pc, #592]	@ (8000f68 <data_process+0x268>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]

    // PHASE 0: INIT PHASE
    if (phase == 0) {
 8000d1c:	4b93      	ldr	r3, [pc, #588]	@ (8000f6c <data_process+0x26c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d000      	beq.n	8000d26 <data_process+0x26>
 8000d24:	e0c2      	b.n	8000eac <data_process+0x1ac>




    	//set a CK
    	if(!CK_set){
 8000d26:	4b92      	ldr	r3, [pc, #584]	@ (8000f70 <data_process+0x270>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d126      	bne.n	8000d7c <data_process+0x7c>
        if (data_left == 0 && data_right == 0) return; // None high
 8000d2e:	1cfb      	adds	r3, r7, #3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d104      	bne.n	8000d40 <data_process+0x40>
 8000d36:	1cbb      	adds	r3, r7, #2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d100      	bne.n	8000d40 <data_process+0x40>
 8000d3e:	e10b      	b.n	8000f58 <data_process+0x258>
        if (data_left == 1 && data_right == 1) return; // Both high
 8000d40:	1cfb      	adds	r3, r7, #3
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d104      	bne.n	8000d52 <data_process+0x52>
 8000d48:	1cbb      	adds	r3, r7, #2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d100      	bne.n	8000d52 <data_process+0x52>
 8000d50:	e104      	b.n	8000f5c <data_process+0x25c>

        // Determine CK and DT

         CK = (data_left == 1) ? &data_left : &data_right;
 8000d52:	1cfb      	adds	r3, r7, #3
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d101      	bne.n	8000d5e <data_process+0x5e>
 8000d5a:	1cfa      	adds	r2, r7, #3
 8000d5c:	e000      	b.n	8000d60 <data_process+0x60>
 8000d5e:	1cba      	adds	r2, r7, #2
 8000d60:	4b84      	ldr	r3, [pc, #528]	@ (8000f74 <data_process+0x274>)
 8000d62:	601a      	str	r2, [r3, #0]
         DT = (data_left == 0) ? &data_left : &data_right;
 8000d64:	1cfb      	adds	r3, r7, #3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <data_process+0x70>
 8000d6c:	1cfa      	adds	r2, r7, #3
 8000d6e:	e000      	b.n	8000d72 <data_process+0x72>
 8000d70:	1cba      	adds	r2, r7, #2
 8000d72:	4b81      	ldr	r3, [pc, #516]	@ (8000f78 <data_process+0x278>)
 8000d74:	601a      	str	r2, [r3, #0]


        CK_set=1;
 8000d76:	4b7e      	ldr	r3, [pc, #504]	@ (8000f70 <data_process+0x270>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]

    	}

    	if (CK_set){
 8000d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f70 <data_process+0x270>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d100      	bne.n	8000d86 <data_process+0x86>
 8000d84:	e092      	b.n	8000eac <data_process+0x1ac>
    		if (count_up==0 && (*CK == 1 && *DT == 0) )
 8000d86:	4b7d      	ldr	r3, [pc, #500]	@ (8000f7c <data_process+0x27c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d114      	bne.n	8000db8 <data_process+0xb8>
 8000d8e:	4b79      	ldr	r3, [pc, #484]	@ (8000f74 <data_process+0x274>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10f      	bne.n	8000db8 <data_process+0xb8>
 8000d98:	4b77      	ldr	r3, [pc, #476]	@ (8000f78 <data_process+0x278>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10a      	bne.n	8000db8 <data_process+0xb8>
    		{
    			count_up++;
 8000da2:	4b76      	ldr	r3, [pc, #472]	@ (8000f7c <data_process+0x27c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b74      	ldr	r3, [pc, #464]	@ (8000f7c <data_process+0x27c>)
 8000dac:	701a      	strb	r2, [r3, #0]
    			Timeout(TIMEOUT_DURATION);
 8000dae:	4b74      	ldr	r3, [pc, #464]	@ (8000f80 <data_process+0x280>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 f94d 	bl	8001050 <Timeout>
    			return;
 8000db6:	e0d2      	b.n	8000f5e <data_process+0x25e>

    		}
    		else if ((!checkTimeout() && count_up==1) && (*CK == 0 && *DT == 0) )
 8000db8:	f000 f960 	bl	800107c <checkTimeout>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	4053      	eors	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d018      	beq.n	8000dfc <data_process+0xfc>
 8000dca:	4b6c      	ldr	r3, [pc, #432]	@ (8000f7c <data_process+0x27c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d114      	bne.n	8000dfc <data_process+0xfc>
 8000dd2:	4b68      	ldr	r3, [pc, #416]	@ (8000f74 <data_process+0x274>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10f      	bne.n	8000dfc <data_process+0xfc>
 8000ddc:	4b66      	ldr	r3, [pc, #408]	@ (8000f78 <data_process+0x278>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10a      	bne.n	8000dfc <data_process+0xfc>
    		{
    			count_up++;
 8000de6:	4b65      	ldr	r3, [pc, #404]	@ (8000f7c <data_process+0x27c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b63      	ldr	r3, [pc, #396]	@ (8000f7c <data_process+0x27c>)
 8000df0:	701a      	strb	r2, [r3, #0]
    			Timeout(TIMEOUT_DURATION);
 8000df2:	4b63      	ldr	r3, [pc, #396]	@ (8000f80 <data_process+0x280>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 f92b 	bl	8001050 <Timeout>
    			return;
 8000dfa:	e0b0      	b.n	8000f5e <data_process+0x25e>

    		}
    		else if ((!checkTimeout() && count_up==2) && (*CK == 1 && *DT == 0) )
 8000dfc:	f000 f93e 	bl	800107c <checkTimeout>
 8000e00:	0003      	movs	r3, r0
 8000e02:	001a      	movs	r2, r3
 8000e04:	2301      	movs	r3, #1
 8000e06:	4053      	eors	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d03c      	beq.n	8000e88 <data_process+0x188>
 8000e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f7c <data_process+0x27c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d138      	bne.n	8000e88 <data_process+0x188>
 8000e16:	4b57      	ldr	r3, [pc, #348]	@ (8000f74 <data_process+0x274>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d133      	bne.n	8000e88 <data_process+0x188>
 8000e20:	4b55      	ldr	r3, [pc, #340]	@ (8000f78 <data_process+0x278>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d12e      	bne.n	8000e88 <data_process+0x188>
    		{

    			  for (int i = 0; i < 16; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	e007      	b.n	8000e40 <data_process+0x140>
    			            history[i] = 0;
 8000e30:	4a54      	ldr	r2, [pc, #336]	@ (8000f84 <data_process+0x284>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
    			  for (int i = 0; i < 16; i++) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	ddf4      	ble.n	8000e30 <data_process+0x130>
    			        }
    			        DTIndex= 0;
 8000e46:	4b50      	ldr	r3, [pc, #320]	@ (8000f88 <data_process+0x288>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]


    			enough_data=0;
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f8c <data_process+0x28c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
    			count_up++;
 8000e52:	4b4a      	ldr	r3, [pc, #296]	@ (8000f7c <data_process+0x27c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b48      	ldr	r3, [pc, #288]	@ (8000f7c <data_process+0x27c>)
 8000e5c:	701a      	strb	r2, [r3, #0]
    		    lastStateCK= *CK;
 8000e5e:	4b45      	ldr	r3, [pc, #276]	@ (8000f74 <data_process+0x274>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <data_process+0x290>)
 8000e66:	701a      	strb	r2, [r3, #0]
    			lastStateDT= *DT;
 8000e68:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <data_process+0x278>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	4b49      	ldr	r3, [pc, #292]	@ (8000f94 <data_process+0x294>)
 8000e70:	701a      	strb	r2, [r3, #0]
    			phase++;
 8000e72:	4b3e      	ldr	r3, [pc, #248]	@ (8000f6c <data_process+0x26c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f6c <data_process+0x26c>)
 8000e7c:	701a      	strb	r2, [r3, #0]
    			Timeout(TIMEOUT_DURATION);
 8000e7e:	4b40      	ldr	r3, [pc, #256]	@ (8000f80 <data_process+0x280>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 f8e5 	bl	8001050 <Timeout>
    			return;
 8000e86:	e06a      	b.n	8000f5e <data_process+0x25e>

    		}
    		else if (checkTimeout() || *DT == 1 ){
 8000e88:	f000 f8f8 	bl	800107c <checkTimeout>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d104      	bne.n	8000e9a <data_process+0x19a>
 8000e90:	4b39      	ldr	r3, [pc, #228]	@ (8000f78 <data_process+0x278>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <data_process+0x1ac>
    		count_up=0;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	@ (8000f7c <data_process+0x27c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
    		CK_set=0;
 8000ea0:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <data_process+0x270>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
    		phase=0;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	@ (8000f6c <data_process+0x26c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
    }



    // PHASE 1: READ DATA
    if (phase == 1) {
 8000eac:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <data_process+0x26c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d154      	bne.n	8000f5e <data_process+0x25e>


        if (checkTimeout()) {
 8000eb4:	f000 f8e2 	bl	800107c <checkTimeout>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d00c      	beq.n	8000ed6 <data_process+0x1d6>
            phase = 0; // Timeout, reset phase
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f6c <data_process+0x26c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
            count_up = 0;
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <data_process+0x27c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
            DTIndex = 0;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <data_process+0x288>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
            CK_set=0;
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <data_process+0x270>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
            return;
 8000ed4:	e043      	b.n	8000f5e <data_process+0x25e>
        }

        if (*CK != lastStateCK) {
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <data_process+0x274>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <data_process+0x290>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d00b      	beq.n	8000efc <data_process+0x1fc>
            lastStateCK = *CK;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <data_process+0x274>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <data_process+0x290>)
 8000eec:	701a      	strb	r2, [r3, #0]
            clockChanged=1;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <data_process+0x268>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
            Timeout(3000);
 8000ef4:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <data_process+0x280>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f8aa 	bl	8001050 <Timeout>

        }

        if (clockChanged && *CK==1){  // daca a existat o tranzitie si clock e high
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <data_process+0x268>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d012      	beq.n	8000f2a <data_process+0x22a>
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <data_process+0x274>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10d      	bne.n	8000f2a <data_process+0x22a>

        	history[DTIndex]=*DT;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <data_process+0x278>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1d      	ldr	r2, [pc, #116]	@ (8000f88 <data_process+0x288>)
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	7819      	ldrb	r1, [r3, #0]
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <data_process+0x284>)
 8000f1a:	5499      	strb	r1, [r3, r2]
        	DTIndex++;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <data_process+0x288>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <data_process+0x288>)
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e019      	b.n	8000f5e <data_process+0x25e>
        }

        else if(checkTimeout() &&  DTIndex>=4){
 8000f2a:	f000 f8a7 	bl	800107c <checkTimeout>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d007      	beq.n	8000f42 <data_process+0x242>
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <data_process+0x288>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d903      	bls.n	8000f42 <data_process+0x242>

        	enough_data=1;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <data_process+0x28c>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e00d      	b.n	8000f5e <data_process+0x25e>


        }
        else if (DTIndex>5){
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <data_process+0x288>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d909      	bls.n	8000f5e <data_process+0x25e>

        	phase=0;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <data_process+0x26c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			enough_data=1;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <data_process+0x28c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e002      	b.n	8000f5e <data_process+0x25e>
        if (data_left == 0 && data_right == 0) return; // None high
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	e000      	b.n	8000f5e <data_process+0x25e>
        if (data_left == 1 && data_right == 1) return; // Both high
 8000f5c:	46c0      	nop			@ (mov r8, r8)

    }



} //end void
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000001c 	.word	0x2000001c
 8000f68:	20000050 	.word	0x20000050
 8000f6c:	20000039 	.word	0x20000039
 8000f70:	2000003c 	.word	0x2000003c
 8000f74:	20000040 	.word	0x20000040
 8000f78:	20000044 	.word	0x20000044
 8000f7c:	2000003a 	.word	0x2000003a
 8000f80:	00000bb8 	.word	0x00000bb8
 8000f84:	20000028 	.word	0x20000028
 8000f88:	20000038 	.word	0x20000038
 8000f8c:	2000003b 	.word	0x2000003b
 8000f90:	2000004e 	.word	0x2000004e
 8000f94:	2000004f 	.word	0x2000004f

08000f98 <SendSingleValue>:
}


//COMUNICATION FUNCTIONS

void SendSingleValue(uint8_t slave_address, uint8_t index, uint16_t value) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0004      	movs	r4, r0
 8000fa0:	0008      	movs	r0, r1
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	1c22      	adds	r2, r4, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	1dbb      	adds	r3, r7, #6
 8000fac:	1c02      	adds	r2, r0, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	1c0a      	adds	r2, r1, #0
 8000fb4:	801a      	strh	r2, [r3, #0]
    uint8_t buffer[3];
    buffer[0] = index;               // Index
 8000fb6:	210c      	movs	r1, #12
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	1dba      	adds	r2, r7, #6
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	701a      	strb	r2, [r3, #0]
    buffer[1] = (value >> 8) & 0xFF; // High byte of value
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	705a      	strb	r2, [r3, #1]
    buffer[2] = value & 0xFF;        // Low byte of value
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	709a      	strb	r2, [r3, #2]

    I2C_Send_Buffer(slave_address, buffer, sizeof(buffer)); // Send single value
 8000fd8:	1879      	adds	r1, r7, r1
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff fc83 	bl	80008ec <I2C_Send_Buffer>
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b005      	add	sp, #20
 8000fec:	bd90      	pop	{r4, r7, pc}

08000fee <SetSensorRight>:


void SetSensorRight(uint8_t state) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	701a      	strb	r2, [r3, #0]
    if (state) {
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <SetSensorRight+0x1e>
        signal_right_GPIO_Port->BSRR = signal_right_Pin; // Set pin high
 8001002:	2390      	movs	r3, #144	@ 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	2202      	movs	r2, #2
 8001008:	619a      	str	r2, [r3, #24]
    } else {
        signal_right_GPIO_Port->BSRR = (uint32_t)signal_right_Pin << 16U; // Reset pin low
    }
}
 800100a:	e004      	b.n	8001016 <SetSensorRight+0x28>
        signal_right_GPIO_Port->BSRR = (uint32_t)signal_right_Pin << 16U; // Reset pin low
 800100c:	2390      	movs	r3, #144	@ 0x90
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	0292      	lsls	r2, r2, #10
 8001014:	619a      	str	r2, [r3, #24]
}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}

0800101e <SetSensorLeft>:

void SetSensorLeft(uint8_t state) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	0002      	movs	r2, r0
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	701a      	strb	r2, [r3, #0]
    if (state) {
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <SetSensorLeft+0x1e>
        signal_left_GPIO_Port->BSRR = signal_left_Pin; // Set pin high
 8001032:	2390      	movs	r3, #144	@ 0x90
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	2210      	movs	r2, #16
 8001038:	619a      	str	r2, [r3, #24]
    } else {
        signal_left_GPIO_Port->BSRR = (uint32_t)signal_left_Pin << 16U; // Reset pin low
    }
}
 800103a:	e004      	b.n	8001046 <SetSensorLeft+0x28>
        signal_left_GPIO_Port->BSRR = (uint32_t)signal_left_Pin << 16U; // Reset pin low
 800103c:	2390      	movs	r3, #144	@ 0x90
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	0352      	lsls	r2, r2, #13
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <Timeout>:





void Timeout(uint16_t timeout_ms) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	801a      	strh	r2, [r3, #0]
    TIM16->CNT = timeout_ms;    // Set the counter to the desired value
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <Timeout+0x28>)
 800105e:	1dba      	adds	r2, r7, #6
 8001060:	8812      	ldrh	r2, [r2, #0]
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM16->CR1 |= TIM_CR1_CEN;  // Start the counter
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <Timeout+0x28>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <Timeout+0x28>)
 800106a:	2101      	movs	r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40014400 	.word	0x40014400

0800107c <checkTimeout>:

void endTimeout(void) {
    TIM16->CR1 &= ~TIM_CR1_CEN; // Stop the counter
}

bool checkTimeout(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	//return false if timmer still active

    return (TIM16->CNT == 0 && !(TIM16->CR1 & TIM_CR1_CEN)); // CNT == 0 and timer is stopped
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <checkTimeout+0x2c>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <checkTimeout+0x1a>
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <checkTimeout+0x2c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d101      	bne.n	8001096 <checkTimeout+0x1a>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <checkTimeout+0x1c>
 8001096:	2300      	movs	r3, #0
 8001098:	1c1a      	adds	r2, r3, #0
 800109a:	2301      	movs	r3, #1
 800109c:	4013      	ands	r3, r2
 800109e:	b2db      	uxtb	r3, r3

    //return false;
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	40014400 	.word	0x40014400

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END I2C1_IRQn 0 */
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010e8:	46c0      	nop			@ (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f0:	480d      	ldr	r0, [pc, #52]	@ (8001128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f4:	f7ff fff6 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111e:	f000 f92d 	bl	800137c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff f8ad 	bl	8000280 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   r0, =_estack
 8001128:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001134:	080013e4 	.word	0x080013e4
  ldr r2, =_sbss
 8001138:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800113c:	20000054 	.word	0x20000054

08001140 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_IRQHandler>

08001142 <LL_GPIO_SetPinMode>:
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	435b      	muls	r3, r3
 8001156:	001a      	movs	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	189b      	adds	r3, r3, r2
 800115e:	43db      	mvns	r3, r3
 8001160:	400b      	ands	r3, r1
 8001162:	001a      	movs	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	435b      	muls	r3, r3
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	434b      	muls	r3, r1
 800116c:	431a      	orrs	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}

0800117a <LL_GPIO_SetPinOutputType>:
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	434b      	muls	r3, r1
 8001196:	431a      	orrs	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <LL_GPIO_SetPinSpeed>:
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6899      	ldr	r1, [r3, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	435b      	muls	r3, r3
 80011b8:	001a      	movs	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	43db      	mvns	r3, r3
 80011c2:	400b      	ands	r3, r1
 80011c4:	001a      	movs	r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	435b      	muls	r3, r3
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	434b      	muls	r3, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}

080011dc <LL_GPIO_SetPinPull>:
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68d9      	ldr	r1, [r3, #12]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	435b      	muls	r3, r3
 80011f0:	001a      	movs	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	189b      	adds	r3, r3, r2
 80011f8:	43db      	mvns	r3, r3
 80011fa:	400b      	ands	r3, r1
 80011fc:	001a      	movs	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	435b      	muls	r3, r3
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	434b      	muls	r3, r1
 8001206:	431a      	orrs	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	60da      	str	r2, [r3, #12]
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b004      	add	sp, #16
 8001212:	bd80      	pop	{r7, pc}

08001214 <LL_GPIO_SetAFPin_0_7>:
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6a19      	ldr	r1, [r3, #32]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	435b      	muls	r3, r3
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	4353      	muls	r3, r2
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	435a      	muls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	43db      	mvns	r3, r3
 8001238:	400b      	ands	r3, r1
 800123a:	001a      	movs	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	435b      	muls	r3, r3
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	434b      	muls	r3, r1
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	434b      	muls	r3, r1
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	434b      	muls	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	621a      	str	r2, [r3, #32]
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}

0800125a <LL_GPIO_SetAFPin_8_15>:
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	0a12      	lsrs	r2, r2, #8
 8001272:	4353      	muls	r3, r2
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	0a12      	lsrs	r2, r2, #8
 8001278:	4353      	muls	r3, r2
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	0a12      	lsrs	r2, r2, #8
 800127e:	435a      	muls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	43db      	mvns	r3, r3
 8001288:	400b      	ands	r3, r1
 800128a:	001a      	movs	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	0a09      	lsrs	r1, r1, #8
 8001294:	434b      	muls	r3, r1
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	0a09      	lsrs	r1, r1, #8
 800129a:	434b      	muls	r3, r1
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	0a09      	lsrs	r1, r1, #8
 80012a0:	434b      	muls	r3, r1
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	434b      	muls	r3, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b004      	add	sp, #16
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80012c2:	e048      	b.n	8001356 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d03a      	beq.n	8001350 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d003      	beq.n	80012ea <LL_GPIO_Init+0x36>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d10e      	bne.n	8001308 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff ff56 	bl	80011a4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff ff39 	bl	800117a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff63 	bl	80011dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d111      	bne.n	8001342 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2bff      	cmp	r3, #255	@ 0xff
 8001322:	d807      	bhi.n	8001334 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff ff71 	bl	8001214 <LL_GPIO_SetAFPin_0_7>
 8001332:	e006      	b.n	8001342 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff8c 	bl	800125a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fef9 	bl	8001142 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	40da      	lsrs	r2, r3
 800135e:	1e13      	subs	r3, r2, #0
 8001360:	d1b0      	bne.n	80012c4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001362:	2300      	movs	r3, #0
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b004      	add	sp, #16
 800136a:	bd80      	pop	{r7, pc}

0800136c <memset>:
 800136c:	0003      	movs	r3, r0
 800136e:	1882      	adds	r2, r0, r2
 8001370:	4293      	cmp	r3, r2
 8001372:	d100      	bne.n	8001376 <memset+0xa>
 8001374:	4770      	bx	lr
 8001376:	7019      	strb	r1, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	e7f9      	b.n	8001370 <memset+0x4>

0800137c <__libc_init_array>:
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	2600      	movs	r6, #0
 8001380:	4c0c      	ldr	r4, [pc, #48]	@ (80013b4 <__libc_init_array+0x38>)
 8001382:	4d0d      	ldr	r5, [pc, #52]	@ (80013b8 <__libc_init_array+0x3c>)
 8001384:	1b64      	subs	r4, r4, r5
 8001386:	10a4      	asrs	r4, r4, #2
 8001388:	42a6      	cmp	r6, r4
 800138a:	d109      	bne.n	80013a0 <__libc_init_array+0x24>
 800138c:	2600      	movs	r6, #0
 800138e:	f000 f819 	bl	80013c4 <_init>
 8001392:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <__libc_init_array+0x40>)
 8001394:	4d0a      	ldr	r5, [pc, #40]	@ (80013c0 <__libc_init_array+0x44>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	42a6      	cmp	r6, r4
 800139c:	d105      	bne.n	80013aa <__libc_init_array+0x2e>
 800139e:	bd70      	pop	{r4, r5, r6, pc}
 80013a0:	00b3      	lsls	r3, r6, #2
 80013a2:	58eb      	ldr	r3, [r5, r3]
 80013a4:	4798      	blx	r3
 80013a6:	3601      	adds	r6, #1
 80013a8:	e7ee      	b.n	8001388 <__libc_init_array+0xc>
 80013aa:	00b3      	lsls	r3, r6, #2
 80013ac:	58eb      	ldr	r3, [r5, r3]
 80013ae:	4798      	blx	r3
 80013b0:	3601      	adds	r6, #1
 80013b2:	e7f2      	b.n	800139a <__libc_init_array+0x1e>
 80013b4:	080013dc 	.word	0x080013dc
 80013b8:	080013dc 	.word	0x080013dc
 80013bc:	080013e0 	.word	0x080013e0
 80013c0:	080013dc 	.word	0x080013dc

080013c4 <_init>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr

080013d0 <_fini>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d6:	bc08      	pop	{r3}
 80013d8:	469e      	mov	lr, r3
 80013da:	4770      	bx	lr
