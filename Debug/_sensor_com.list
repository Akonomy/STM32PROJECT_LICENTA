
_sensor_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f54  08000f5c  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f54  08000f54  00010f5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f54  08000f54  00010f5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f54  08000f5c  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000000  08000f5c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000f5c  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010f5c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010f84  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ab6  00000000  00000000  00010fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f2  00000000  00000000  00012a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00013170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018d  00000000  00000000  00013390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000afd3  00000000  00000000  0001351d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026c6  00000000  00000000  0001e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003dab5  00000000  00000000  00020bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006ac  00000000  00000000  0005e66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0005ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000f3c 	.word	0x08000f3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000f3c 	.word	0x08000f3c

08000108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b083      	sub	sp, #12
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	6039      	str	r1, [r7, #0]
 8000112:	1dfb      	adds	r3, r7, #7
 8000114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000116:	1dfb      	adds	r3, r7, #7
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2b7f      	cmp	r3, #127	; 0x7f
 800011c:	d828      	bhi.n	8000170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800011e:	4a2f      	ldr	r2, [pc, #188]	; (80001dc <__NVIC_SetPriority+0xd4>)
 8000120:	1dfb      	adds	r3, r7, #7
 8000122:	781b      	ldrb	r3, [r3, #0]
 8000124:	b25b      	sxtb	r3, r3
 8000126:	089b      	lsrs	r3, r3, #2
 8000128:	33c0      	adds	r3, #192	; 0xc0
 800012a:	009b      	lsls	r3, r3, #2
 800012c:	589b      	ldr	r3, [r3, r2]
 800012e:	1dfa      	adds	r2, r7, #7
 8000130:	7812      	ldrb	r2, [r2, #0]
 8000132:	0011      	movs	r1, r2
 8000134:	2203      	movs	r2, #3
 8000136:	400a      	ands	r2, r1
 8000138:	00d2      	lsls	r2, r2, #3
 800013a:	21ff      	movs	r1, #255	; 0xff
 800013c:	4091      	lsls	r1, r2
 800013e:	000a      	movs	r2, r1
 8000140:	43d2      	mvns	r2, r2
 8000142:	401a      	ands	r2, r3
 8000144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000146:	683b      	ldr	r3, [r7, #0]
 8000148:	019b      	lsls	r3, r3, #6
 800014a:	22ff      	movs	r2, #255	; 0xff
 800014c:	401a      	ands	r2, r3
 800014e:	1dfb      	adds	r3, r7, #7
 8000150:	781b      	ldrb	r3, [r3, #0]
 8000152:	0018      	movs	r0, r3
 8000154:	2303      	movs	r3, #3
 8000156:	4003      	ands	r3, r0
 8000158:	00db      	lsls	r3, r3, #3
 800015a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800015c:	481f      	ldr	r0, [pc, #124]	; (80001dc <__NVIC_SetPriority+0xd4>)
 800015e:	1dfb      	adds	r3, r7, #7
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	b25b      	sxtb	r3, r3
 8000164:	089b      	lsrs	r3, r3, #2
 8000166:	430a      	orrs	r2, r1
 8000168:	33c0      	adds	r3, #192	; 0xc0
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800016e:	e031      	b.n	80001d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000170:	4a1b      	ldr	r2, [pc, #108]	; (80001e0 <__NVIC_SetPriority+0xd8>)
 8000172:	1dfb      	adds	r3, r7, #7
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	0019      	movs	r1, r3
 8000178:	230f      	movs	r3, #15
 800017a:	400b      	ands	r3, r1
 800017c:	3b08      	subs	r3, #8
 800017e:	089b      	lsrs	r3, r3, #2
 8000180:	3306      	adds	r3, #6
 8000182:	009b      	lsls	r3, r3, #2
 8000184:	18d3      	adds	r3, r2, r3
 8000186:	3304      	adds	r3, #4
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	1dfa      	adds	r2, r7, #7
 800018c:	7812      	ldrb	r2, [r2, #0]
 800018e:	0011      	movs	r1, r2
 8000190:	2203      	movs	r2, #3
 8000192:	400a      	ands	r2, r1
 8000194:	00d2      	lsls	r2, r2, #3
 8000196:	21ff      	movs	r1, #255	; 0xff
 8000198:	4091      	lsls	r1, r2
 800019a:	000a      	movs	r2, r1
 800019c:	43d2      	mvns	r2, r2
 800019e:	401a      	ands	r2, r3
 80001a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	019b      	lsls	r3, r3, #6
 80001a6:	22ff      	movs	r2, #255	; 0xff
 80001a8:	401a      	ands	r2, r3
 80001aa:	1dfb      	adds	r3, r7, #7
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	0018      	movs	r0, r3
 80001b0:	2303      	movs	r3, #3
 80001b2:	4003      	ands	r3, r0
 80001b4:	00db      	lsls	r3, r3, #3
 80001b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001b8:	4809      	ldr	r0, [pc, #36]	; (80001e0 <__NVIC_SetPriority+0xd8>)
 80001ba:	1dfb      	adds	r3, r7, #7
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	001c      	movs	r4, r3
 80001c0:	230f      	movs	r3, #15
 80001c2:	4023      	ands	r3, r4
 80001c4:	3b08      	subs	r3, #8
 80001c6:	089b      	lsrs	r3, r3, #2
 80001c8:	430a      	orrs	r2, r1
 80001ca:	3306      	adds	r3, #6
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	18c3      	adds	r3, r0, r3
 80001d0:	3304      	adds	r3, #4
 80001d2:	601a      	str	r2, [r3, #0]
}
 80001d4:	46c0      	nop			; (mov r8, r8)
 80001d6:	46bd      	mov	sp, r7
 80001d8:	b003      	add	sp, #12
 80001da:	bd90      	pop	{r4, r7, pc}
 80001dc:	e000e100 	.word	0xe000e100
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001ee:	6959      	ldr	r1, [r3, #20]
 80001f0:	4b06      	ldr	r3, [pc, #24]	; (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	430a      	orrs	r2, r1
 80001f6:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <LL_AHB1_GRP1_EnableClock+0x28>)
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4013      	ands	r3, r2
 8000200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000202:	68fb      	ldr	r3, [r7, #12]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b004      	add	sp, #16
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40021000 	.word	0x40021000

08000210 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 800021a:	69d9      	ldr	r1, [r3, #28]
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	430a      	orrs	r2, r1
 8000222:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <LL_APB1_GRP1_EnableClock+0x28>)
 8000226:	69db      	ldr	r3, [r3, #28]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4013      	ands	r3, r2
 800022c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800022e:	68fb      	ldr	r3, [r7, #12]
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	b004      	add	sp, #16
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000

0800023c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 8000246:	6999      	ldr	r1, [r3, #24]
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	430a      	orrs	r2, r1
 800024e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <LL_APB1_GRP2_EnableClock+0x28>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4013      	ands	r3, r2
 8000258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800025a:	68fb      	ldr	r3, [r7, #12]
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b004      	add	sp, #16
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000

08000268 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	683a      	ldr	r2, [r7, #0]
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t direction=0;
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
	uint8_t way_to_go[4]= {3,1,4,2};
 800028c:	003b      	movs	r3, r7
 800028e:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <main+0x70>)
 8000290:	601a      	str	r2, [r3, #0]
	uint8_t index=0;
 8000292:	1dbb      	adds	r3, r7, #6
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000298:	2001      	movs	r0, #1
 800029a:	f7ff ffcf 	bl	800023c <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800029e:	2380      	movs	r3, #128	; 0x80
 80002a0:	055b      	lsls	r3, r3, #21
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffb4 	bl	8000210 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
   NVIC_SetPriority(SysTick_IRQn, 3);
 80002a8:	2301      	movs	r3, #1
 80002aa:	425b      	negs	r3, r3
 80002ac:	2103      	movs	r1, #3
 80002ae:	0018      	movs	r0, r3
 80002b0:	f7ff ff2a 	bl	8000108 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f820 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f9cc 	bl	8000654 <MX_GPIO_Init>
  MX_ADC_Init();
 80002bc:	f000 f836 	bl	800032c <MX_ADC_Init>
  MX_I2C1_Init();
 80002c0:	f000 f864 	bl	800038c <MX_I2C1_Init>
  MX_TIM14_Init();
 80002c4:	f000 f902 	bl	80004cc <MX_TIM14_Init>
 MX_TIM16_Init();
 80002c8:	f000 f934 	bl	8000534 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80002cc:	f000 f96c 	bl	80005a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  TIM14->CR1 |= TIM_CR1_CEN; // Start timer
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <main+0x74>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <main+0x74>)
 80002d6:	2101      	movs	r1, #1
 80002d8:	430a      	orrs	r2, r1
 80002da:	601a      	str	r2, [r3, #0]
         	 //SetleftLow();
          }


*/
          read_sensors();
 80002dc:	f000 fad4 	bl	8000888 <read_sensors>


          data_process();
 80002e0:	f000 fb12 	bl	8000908 <data_process>
          ProcessCollectedData();
 80002e4:	f000 fc1e 	bl	8000b24 <ProcessCollectedData>
          //go( times , direction, duration)
          SendSingleValue(0x08, 128, direction);

*/

          DelayWithTimer(15); // Delay before the next cycle
 80002e8:	200f      	movs	r0, #15
 80002ea:	f000 fab9 	bl	8000860 <DelayWithTimer>
          read_sensors();
 80002ee:	e7f5      	b.n	80002dc <main+0x5c>
 80002f0:	02040103 	.word	0x02040103
 80002f4:	40002000 	.word	0x40002000

080002f8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)

{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;                      // Enable HSI
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <SystemClock_Config+0x30>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <SystemClock_Config+0x30>)
 8000302:	2101      	movs	r1, #1
 8000304:	430a      	orrs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));           // Wait until HSI is ready
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <SystemClock_Config+0x30>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2202      	movs	r2, #2
 8000310:	4013      	ands	r3, r2
 8000312:	d0fa      	beq.n	800030a <SystemClock_Config+0x12>

    RCC->CFGR = RCC_CFGR_SW_HSI;                  // Select HSI as system clock
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <SystemClock_Config+0x30>)
 8000316:	2200      	movs	r2, #0
 8000318:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 |             // AHB prescaler
 800031a:	4a03      	ldr	r2, [pc, #12]	; (8000328 <SystemClock_Config+0x30>)
 800031c:	4b02      	ldr	r3, [pc, #8]	; (8000328 <SystemClock_Config+0x30>)
 800031e:	6852      	ldr	r2, [r2, #4]
 8000320:	605a      	str	r2, [r3, #4]
                 RCC_CFGR_PPRE_DIV1;              // APB1 prescaler
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40021000 	.word	0x40021000

0800032c <MX_ADC_Init>:
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)

{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;           // Enable ADC1 clock
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_ADC_Init+0x58>)
 8000332:	699a      	ldr	r2, [r3, #24]
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_ADC_Init+0x58>)
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	0089      	lsls	r1, r1, #2
 800033a:	430a      	orrs	r2, r1
 800033c:	619a      	str	r2, [r3, #24]
    ADC1->CR = 0;                                 // Reset control register
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC_Init+0x5c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
    ADC1->CFGR1 = 0;                              // Reset configuration register
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_ADC_Init+0x5c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]

    // Set resolution to 12-bit (reset state, no action needed as 12-bit is default)
    // Configure sampling time to 1.5 cycles
    ADC1->SMPR = 0x0;                             // Set sampling time to 1.5 ADC clock cycles (default)
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_ADC_Init+0x5c>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]

    ADC1->CHSELR = ADC_CHSELR_CHSEL0;             // Select channel 0
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <MX_ADC_Init+0x5c>)
 8000352:	2201      	movs	r2, #1
 8000354:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;              // Right data alignment (default)
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_ADC_Init+0x5c>)
 8000358:	68da      	ldr	r2, [r3, #12]
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_ADC_Init+0x5c>)
 800035c:	2120      	movs	r1, #32
 800035e:	438a      	bics	r2, r1
 8000360:	60da      	str	r2, [r3, #12]

    ADC1->CR |= ADC_CR_ADEN;                      // Enable ADC
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_ADC_Init+0x5c>)
 8000364:	689a      	ldr	r2, [r3, #8]
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_ADC_Init+0x5c>)
 8000368:	2101      	movs	r1, #1
 800036a:	430a      	orrs	r2, r1
 800036c:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));         // Wait for ADC to be ready
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_ADC_Init+0x5c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2201      	movs	r2, #1
 8000376:	4013      	ands	r3, r2
 8000378:	d0fa      	beq.n	8000370 <MX_ADC_Init+0x44>
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	40021000 	.word	0x40021000
 8000388:	40012400 	.word	0x40012400

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */

    /* USER CODE END I2C1_Init 0 */

    /* Enable clock for GPIOA and I2C1 peripherals */
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  // Enable GPIOA clock
 8000390:	4b45      	ldr	r3, [pc, #276]	; (80004a8 <MX_I2C1_Init+0x11c>)
 8000392:	695a      	ldr	r2, [r3, #20]
 8000394:	4b44      	ldr	r3, [pc, #272]	; (80004a8 <MX_I2C1_Init+0x11c>)
 8000396:	2180      	movs	r1, #128	; 0x80
 8000398:	0289      	lsls	r1, r1, #10
 800039a:	430a      	orrs	r2, r1
 800039c:	615a      	str	r2, [r3, #20]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // Enable I2C1 clock
 800039e:	4b42      	ldr	r3, [pc, #264]	; (80004a8 <MX_I2C1_Init+0x11c>)
 80003a0:	69da      	ldr	r2, [r3, #28]
 80003a2:	4b41      	ldr	r3, [pc, #260]	; (80004a8 <MX_I2C1_Init+0x11c>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0389      	lsls	r1, r1, #14
 80003a8:	430a      	orrs	r2, r1
 80003aa:	61da      	str	r2, [r3, #28]

    /* Configure GPIOA for I2C1_SCL (PA9) and I2C1_SDA (PA10) */
    GPIOA->MODER &= ~((3U << (2 * 9)) | (3U << (2 * 10)));  // Clear mode bits for PA9 and PA10
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	2390      	movs	r3, #144	; 0x90
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	493d      	ldr	r1, [pc, #244]	; (80004ac <MX_I2C1_Init+0x120>)
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= ((2U << (2 * 9)) | (2U << (2 * 10)));   // Set mode to Alternate Function
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	2390      	movs	r3, #144	; 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	21a0      	movs	r1, #160	; 0xa0
 80003c8:	0389      	lsls	r1, r1, #14
 80003ca:	430a      	orrs	r2, r1
 80003cc:	601a      	str	r2, [r3, #0]

    GPIOA->OTYPER |= (1U << 9) | (1U << 10);  // Set output type to Open-Drain for PA9 and PA10
 80003ce:	2390      	movs	r3, #144	; 0x90
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	685a      	ldr	r2, [r3, #4]
 80003d4:	2390      	movs	r3, #144	; 0x90
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	21c0      	movs	r1, #192	; 0xc0
 80003da:	00c9      	lsls	r1, r1, #3
 80003dc:	430a      	orrs	r2, r1
 80003de:	605a      	str	r2, [r3, #4]

    GPIOA->OSPEEDR |= ((3U << (2 * 9)) | (3U << (2 * 10))); // Set speed to High for PA9 and PA10
 80003e0:	2390      	movs	r3, #144	; 0x90
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	2390      	movs	r3, #144	; 0x90
 80003e8:	05db      	lsls	r3, r3, #23
 80003ea:	21f0      	movs	r1, #240	; 0xf0
 80003ec:	0389      	lsls	r1, r1, #14
 80003ee:	430a      	orrs	r2, r1
 80003f0:	609a      	str	r2, [r3, #8]

    GPIOA->PUPDR &= ~((3U << (2 * 9)) | (3U << (2 * 10)));  // No pull-up, no pull-down for PA9 and PA10
 80003f2:	2390      	movs	r3, #144	; 0x90
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	68da      	ldr	r2, [r3, #12]
 80003f8:	2390      	movs	r3, #144	; 0x90
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	492b      	ldr	r1, [pc, #172]	; (80004ac <MX_I2C1_Init+0x120>)
 80003fe:	400a      	ands	r2, r1
 8000400:	60da      	str	r2, [r3, #12]

    GPIOA->AFR[1] &= ~((0xFU << (4 * (9 - 8))) | (0xFU << (4 * (10 - 8))));  // Clear alternate function bits
 8000402:	2390      	movs	r3, #144	; 0x90
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000408:	2390      	movs	r3, #144	; 0x90
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	4928      	ldr	r1, [pc, #160]	; (80004b0 <MX_I2C1_Init+0x124>)
 800040e:	400a      	ands	r2, r1
 8000410:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOA->AFR[1] |= ((4U << (4 * (9 - 8))) | (4U << (4 * (10 - 8))));       // Set AF4 (I2C1) for PA9 and PA10
 8000412:	2390      	movs	r3, #144	; 0x90
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000418:	2390      	movs	r3, #144	; 0x90
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2188      	movs	r1, #136	; 0x88
 800041e:	00c9      	lsls	r1, r1, #3
 8000420:	430a      	orrs	r2, r1
 8000422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Configure I2C1 */
    I2C1->CR1 &= ~I2C_CR1_PE;  // Disable I2C1 to configure it
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_I2C1_Init+0x128>)
 800042a:	2101      	movs	r1, #1
 800042c:	438a      	bics	r2, r1
 800042e:	601a      	str	r2, [r3, #0]

    I2C1->TIMINGR = 0x2000090E; // Configure timing for 100 kHz (assuming HSI clock at 8 MHz)
 8000430:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000432:	4a21      	ldr	r2, [pc, #132]	; (80004b8 <MX_I2C1_Init+0x12c>)
 8000434:	611a      	str	r2, [r3, #16]

    I2C1->CR1 &= ~I2C_CR1_NOSTRETCH; // Enable clock stretching
 8000436:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_I2C1_Init+0x128>)
 800043c:	491f      	ldr	r1, [pc, #124]	; (80004bc <MX_I2C1_Init+0x130>)
 800043e:	400a      	ands	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_GCEN;      // Disable general call mode
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000448:	491d      	ldr	r1, [pc, #116]	; (80004c0 <MX_I2C1_Init+0x134>)
 800044a:	400a      	ands	r2, r1
 800044c:	601a      	str	r2, [r3, #0]

    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;   // Disable own address 1
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000454:	491b      	ldr	r1, [pc, #108]	; (80004c4 <MX_I2C1_Init+0x138>)
 8000456:	400a      	ands	r2, r1
 8000458:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 = (0 << 1) | I2C_OAR1_OA1MODE; // Configure own address 1 to 7-bit mode and set address to 0x00
 800045a:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_I2C1_Init+0x128>)
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	00d2      	lsls	r2, r2, #3
 8000460:	609a      	str	r2, [r3, #8]
    I2C1->OAR1 |= I2C_OAR1_OA1EN;    // Enable own address 1
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0209      	lsls	r1, r1, #8
 800046c:	430a      	orrs	r2, r1
 800046e:	609a      	str	r2, [r3, #8]

    I2C1->OAR2 &= ~I2C_OAR2_OA2EN;   // Disable own address 2
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000472:	68da      	ldr	r2, [r3, #12]
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000476:	4913      	ldr	r1, [pc, #76]	; (80004c4 <MX_I2C1_Init+0x138>)
 8000478:	400a      	ands	r2, r1
 800047a:	60da      	str	r2, [r3, #12]

    I2C1->CR2 &= ~I2C_CR2_ADD10;     // Use 7-bit addressing mode for slave address
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <MX_I2C1_Init+0x128>)
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000482:	4911      	ldr	r1, [pc, #68]	; (80004c8 <MX_I2C1_Init+0x13c>)
 8000484:	400a      	ands	r2, r1
 8000486:	605a      	str	r2, [r3, #4]
    I2C1->CR2 |= I2C_CR2_AUTOEND;    // Enable AUTOEND (automatic STOP condition)
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <MX_I2C1_Init+0x128>)
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_I2C1_Init+0x128>)
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0489      	lsls	r1, r1, #18
 8000492:	430a      	orrs	r2, r1
 8000494:	605a      	str	r2, [r3, #4]

    I2C1->CR1 |= I2C_CR1_PE;         // Enable I2C1 peripheral
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <MX_I2C1_Init+0x128>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_I2C1_Init+0x128>)
 800049c:	2101      	movs	r1, #1
 800049e:	430a      	orrs	r2, r1
 80004a0:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	ffc3ffff 	.word	0xffc3ffff
 80004b0:	fffff00f 	.word	0xfffff00f
 80004b4:	40005400 	.word	0x40005400
 80004b8:	2000090e 	.word	0x2000090e
 80004bc:	fffdffff 	.word	0xfffdffff
 80004c0:	fff7ffff 	.word	0xfff7ffff
 80004c4:	ffff7fff 	.word	0xffff7fff
 80004c8:	fffff7ff 	.word	0xfffff7ff

080004cc <MX_TIM14_Init>:
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)

{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    // Enable the clock for TIM14
    RCC->APB1ENR |= RCC_APB1ENR_TIM14EN; // TIM14 clock enable
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_TIM14_Init+0x54>)
 80004d2:	69da      	ldr	r2, [r3, #28]
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_TIM14_Init+0x54>)
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0049      	lsls	r1, r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	61da      	str	r2, [r3, #28]

    // Reset TIM14 configuration
    TIM14->CR1 = 0; // Clear control register
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_TIM14_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
    TIM14->CNT = 0; // Reset counter
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_TIM14_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24

    // Configure Prescaler
    TIM14->PSC = 7999; // Set prescaler for 1 kHz timer clock (assuming 8 MHz system clock)
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_TIM14_Init+0x58>)
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <MX_TIM14_Init+0x5c>)
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28

    // Configure Counter Mode (Up)
    TIM14->CR1 &= ~TIM_CR1_DIR; // Ensure up-counting mode (DIR = 0)
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_TIM14_Init+0x58>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_TIM14_Init+0x58>)
 80004f6:	2110      	movs	r1, #16
 80004f8:	438a      	bics	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]

    // Configure Period (Auto-Reload Register)
    TIM14->ARR = 999; // Set period for 1 ms increment (1 kHz timer clock)
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_TIM14_Init+0x58>)
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <MX_TIM14_Init+0x60>)
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c

    // Set Clock Division (DIV1)
    TIM14->CR1 &= ~TIM_CR1_CKD; // Set clock division to 1 (CKD = 00)
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_TIM14_Init+0x58>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <MX_TIM14_Init+0x58>)
 8000508:	4909      	ldr	r1, [pc, #36]	; (8000530 <MX_TIM14_Init+0x64>)
 800050a:	400a      	ands	r2, r1
 800050c:	601a      	str	r2, [r3, #0]

    // Enable the Counter
    TIM14->CR1 |= TIM_CR1_CEN; // Start the counter (CEN = 1)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_TIM14_Init+0x58>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <MX_TIM14_Init+0x58>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	40002000 	.word	0x40002000
 8000528:	00001f3f 	.word	0x00001f3f
 800052c:	000003e7 	.word	0x000003e7
 8000530:	fffffcff 	.word	0xfffffcff

08000534 <MX_TIM16_Init>:



//TIMMER16

static void MX_TIM16_Init(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    // Enable the TIM16 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_TIM16_Init+0x60>)
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_TIM16_Init+0x60>)
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	0289      	lsls	r1, r1, #10
 8000542:	430a      	orrs	r2, r1
 8000544:	619a      	str	r2, [r3, #24]

    // Reset TIM16 configuration
    TIM16->CR1 = 0x0000;       // Clear control register
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_TIM16_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
    TIM16->CNT = 0x0000;       // Reset counter
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_TIM16_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
    TIM16->PSC = 7999;         // Prescaler for 1 ms time base (8 MHz clock / (PSC + 1))
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_TIM16_Init+0x64>)
 8000554:	4a11      	ldr	r2, [pc, #68]	; (800059c <MX_TIM16_Init+0x68>)
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
    TIM16->ARR = 5000;         // Auto-reload value for 5000 ms
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_TIM16_Init+0x64>)
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <MX_TIM16_Init+0x6c>)
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM16->CR1 |= TIM_CR1_DIR; // Down-counting mode
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_TIM16_Init+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_TIM16_Init+0x64>)
 8000564:	2110      	movs	r1, #16
 8000566:	430a      	orrs	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
    TIM16->CR1 |= TIM_CR1_OPM; // One-pulse mode (counter stops at 0)
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_TIM16_Init+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MX_TIM16_Init+0x64>)
 8000570:	2108      	movs	r1, #8
 8000572:	430a      	orrs	r2, r1
 8000574:	601a      	str	r2, [r3, #0]
    TIM16->CR1 &= ~TIM_CR1_CKD; // No clock division
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_TIM16_Init+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <MX_TIM16_Init+0x64>)
 800057c:	4909      	ldr	r1, [pc, #36]	; (80005a4 <MX_TIM16_Init+0x70>)
 800057e:	400a      	ands	r2, r1
 8000580:	601a      	str	r2, [r3, #0]

    // Enable the timer (initially stopped)
    TIM16->CR1 &= ~TIM_CR1_CEN;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <MX_TIM16_Init+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <MX_TIM16_Init+0x64>)
 8000588:	2101      	movs	r1, #1
 800058a:	438a      	bics	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	40014400 	.word	0x40014400
 800059c:	00001f3f 	.word	0x00001f3f
 80005a0:	00001388 	.word	0x00001388
 80005a4:	fffffcff 	.word	0xfffffcff

080005a8 <MX_USART1_UART_Init>:
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)

{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    // Enable clock for USART1 and GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_USART1_UART_Init+0xa4>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_USART1_UART_Init+0xa4>)
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	01c9      	lsls	r1, r1, #7
 80005b6:	430a      	orrs	r2, r1
 80005b8:	619a      	str	r2, [r3, #24]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_USART1_UART_Init+0xa4>)
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <MX_USART1_UART_Init+0xa4>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]

    // Configure GPIOA: PA2 (TX) as Alternate Function
    GPIOA->MODER &= ~(3U << (2 * 2));  // Clear MODER for PA2
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	2390      	movs	r3, #144	; 0x90
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2130      	movs	r1, #48	; 0x30
 80005d4:	438a      	bics	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (2 * 2));   // Set MODER to Alternate Function
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	2390      	movs	r3, #144	; 0x90
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	2120      	movs	r1, #32
 80005e4:	430a      	orrs	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1U << (4 * 2));  // Set AF1 (USART1_TX) for PA2
 80005e8:	2390      	movs	r3, #144	; 0x90
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	6a1a      	ldr	r2, [r3, #32]
 80005ee:	2390      	movs	r3, #144	; 0x90
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0049      	lsls	r1, r1, #1
 80005f6:	430a      	orrs	r2, r1
 80005f8:	621a      	str	r2, [r3, #32]

    // Configure GPIOA: PA3 (RX) as Alternate Function
    GPIOA->MODER &= ~(3U << (3 * 2));  // Clear MODER for PA3
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	21c0      	movs	r1, #192	; 0xc0
 8000606:	438a      	bics	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (3 * 2));   // Set MODER to Alternate Function
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	2390      	movs	r3, #144	; 0x90
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	430a      	orrs	r2, r1
 8000618:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] |= (1U << (4 * 3));  // Set AF1 (USART1_RX) for PA3
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	6a1a      	ldr	r2, [r3, #32]
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0149      	lsls	r1, r1, #5
 8000628:	430a      	orrs	r2, r1
 800062a:	621a      	str	r2, [r3, #32]

    // Configure USART1: 9600 baud, 8N1 (1 stop bit, no parity)
    USART1->BRR = 8000000 / 38400; // Assuming 48 MHz clock
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART1_UART_Init+0xa8>)
 800062e:	22d0      	movs	r2, #208	; 0xd0
 8000630:	60da      	str	r2, [r3, #12]
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE; // Enable Transmitter and Receiver
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_USART1_UART_Init+0xa8>)
 8000634:	220c      	movs	r2, #12
 8000636:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= USART_CR1_UE;               // Enable USART
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_USART1_UART_Init+0xa8>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <MX_USART1_UART_Init+0xa8>)
 800063e:	2101      	movs	r1, #1
 8000640:	430a      	orrs	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000
 8000650:	40013800 	.word	0x40013800

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	2318      	movs	r3, #24
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f000 fc3e 	bl	8000ee4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff fdb9 	bl	80001e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	029b      	lsls	r3, r3, #10
 8000676:	0018      	movs	r0, r3
 8000678:	f7ff fdb4 	bl	80001e4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(R_GPIO_Port, R_Pin);
 800067c:	4b61      	ldr	r3, [pc, #388]	; (8000804 <MX_GPIO_Init+0x1b0>)
 800067e:	2101      	movs	r1, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff fdf1 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(L_GPIO_Port, L_Pin);
 8000686:	4b5f      	ldr	r3, [pc, #380]	; (8000804 <MX_GPIO_Init+0x1b0>)
 8000688:	2102      	movs	r1, #2
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff fdec 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(C_GPIO_Port, C_Pin);
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	2120      	movs	r1, #32
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff fde6 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(B_GPIO_Port, B_Pin);
 800069c:	2390      	movs	r3, #144	; 0x90
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff fde0 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(A_GPIO_Port, A_Pin);
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fdda 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signal_right_GPIO_Port, signal_right_Pin);
 80006b4:	2390      	movs	r3, #144	; 0x90
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	2102      	movs	r1, #2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fdd4 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(signal_left_GPIO_Port, signal_left_Pin);
 80006c0:	2390      	movs	r3, #144	; 0x90
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	2110      	movs	r1, #16
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff fdce 	bl	8000268 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = R_Pin;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2201      	movs	r2, #1
 80006d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006de:	003b      	movs	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2202      	movs	r2, #2
 80006e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(R_GPIO_Port, &GPIO_InitStruct);
 80006ea:	003b      	movs	r3, r7
 80006ec:	4a45      	ldr	r2, [pc, #276]	; (8000804 <MX_GPIO_Init+0x1b0>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f000 fb9b 	bl	8000e2c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = L_Pin;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2201      	movs	r2, #1
 8000700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800070e:	003b      	movs	r3, r7
 8000710:	2202      	movs	r2, #2
 8000712:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(L_GPIO_Port, &GPIO_InitStruct);
 8000714:	003b      	movs	r3, r7
 8000716:	4a3b      	ldr	r2, [pc, #236]	; (8000804 <MX_GPIO_Init+0x1b0>)
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f000 fb86 	bl	8000e2c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = C_Pin;
 8000720:	003b      	movs	r3, r7
 8000722:	2220      	movs	r2, #32
 8000724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000726:	003b      	movs	r3, r7
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000738:	003b      	movs	r3, r7
 800073a:	2202      	movs	r2, #2
 800073c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(C_GPIO_Port, &GPIO_InitStruct);
 800073e:	003a      	movs	r2, r7
 8000740:	2390      	movs	r3, #144	; 0x90
 8000742:	05db      	lsls	r3, r3, #23
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fb70 	bl	8000e2c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B_Pin;
 800074c:	003b      	movs	r3, r7
 800074e:	2240      	movs	r2, #64	; 0x40
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000752:	003b      	movs	r3, r7
 8000754:	2201      	movs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000758:	003b      	movs	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000764:	003b      	movs	r3, r7
 8000766:	2202      	movs	r2, #2
 8000768:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 800076a:	003a      	movs	r2, r7
 800076c:	2390      	movs	r3, #144	; 0x90
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fb5a 	bl	8000e2c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A_Pin;
 8000778:	003b      	movs	r3, r7
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800077e:	003b      	movs	r3, r7
 8000780:	2201      	movs	r2, #1
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000790:	003b      	movs	r3, r7
 8000792:	2202      	movs	r2, #2
 8000794:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8000796:	003a      	movs	r2, r7
 8000798:	2390      	movs	r3, #144	; 0x90
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fb44 	bl	8000e2c <LL_GPIO_Init>

  /**/


  GPIO_InitStruct.Pin = signal_right_Pin;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2202      	movs	r2, #2
 80007a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2201      	movs	r2, #1
 80007ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signal_right_GPIO_Port, &GPIO_InitStruct);
 80007c2:	003a      	movs	r2, r7
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fb2e 	bl	8000e2c <LL_GPIO_Init>
  /**/




  GPIO_InitStruct.Pin = signal_left_Pin;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2210      	movs	r2, #16
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2201      	movs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(signal_left_GPIO_Port, &GPIO_InitStruct);
 80007ee:	003a      	movs	r2, r7
 80007f0:	2390      	movs	r3, #144	; 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fb18 	bl	8000e2c <LL_GPIO_Init>



/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b006      	add	sp, #24
 8000802:	bd80      	pop	{r7, pc}
 8000804:	48001400 	.word	0x48001400

08000808 <SetControlPins>:
}



bool SetControlPins(uint8_t code)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2201      	movs	r2, #1
 800081a:	4013      	ands	r3, r2
 800081c:	d001      	beq.n	8000822 <SetControlPins+0x1a>
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	e001      	b.n	8000826 <SetControlPins+0x1e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	041a      	lsls	r2, r3, #16
                  (code & 0x02 ? B_Pin : (uint32_t) B_Pin << 16U) |
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2102      	movs	r1, #2
 800082c:	400b      	ands	r3, r1
 800082e:	d001      	beq.n	8000834 <SetControlPins+0x2c>
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	e001      	b.n	8000838 <SetControlPins+0x30>
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	03db      	lsls	r3, r3, #15
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 8000838:	431a      	orrs	r2, r3
 800083a:	0011      	movs	r1, r2
                  (code & 0x04 ? C_Pin : (uint32_t) C_Pin << 16U);
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2204      	movs	r2, #4
 8000842:	4013      	ands	r3, r2
 8000844:	d001      	beq.n	800084a <SetControlPins+0x42>
 8000846:	2220      	movs	r2, #32
 8000848:	e001      	b.n	800084e <SetControlPins+0x46>
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	039a      	lsls	r2, r3, #14
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	05db      	lsls	r3, r3, #23
                  (code & 0x02 ? B_Pin : (uint32_t) B_Pin << 16U) |
 8000852:	430a      	orrs	r2, r1
    GPIOA->BSRR = (code & 0x01 ? A_Pin : (uint32_t) A_Pin << 16U) |
 8000854:	619a      	str	r2, [r3, #24]
    return true;
 8000856:	2301      	movs	r3, #1
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}

08000860 <DelayWithTimer>:

void DelayWithTimer(uint32_t ms)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    TIM14->CNT = 0;                               // Reset counter
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <DelayWithTimer+0x24>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
    while (TIM14->CNT < ms);                      // Wait for counter to reach ms
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <DelayWithTimer+0x24>)
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	429a      	cmp	r2, r3
 8000878:	d8fa      	bhi.n	8000870 <DelayWithTimer+0x10>
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40002000 	.word	0x40002000

08000888 <read_sensors>:

	}

}

void read_sensors() {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
    for (uint8_t code = 0; code < 8; code++) {
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	e02a      	b.n	80008ec <read_sensors+0x64>
        if (SetControlPins(code)) {
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ffb4 	bl	8000808 <SetControlPins>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d01e      	beq.n	80008e2 <read_sensors+0x5a>
            // Start ADC conversion
             ADC1->CR |= ADC_CR_ADSTART;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <read_sensors+0x78>)
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <read_sensors+0x78>)
 80008aa:	2104      	movs	r1, #4
 80008ac:	430a      	orrs	r2, r1
 80008ae:	609a      	str	r2, [r3, #8]

            // Wait for conversion to complete
            while (!(ADC1->ISR & ADC_ISR_EOC));
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <read_sensors+0x78>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2204      	movs	r2, #4
 80008b8:	4013      	ands	r3, r2
 80008ba:	d0fa      	beq.n	80008b2 <read_sensors+0x2a>
            //uint16_t adcValue = ADC1->DR;

            // Store the raw ADC value in the sensor_data array

            //convertadc to bin
            uint8_t adcValue = (ADC1->DR > 1000) ? 1 : 0; // Threshold ADC value to 1 or 0
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <read_sensors+0x78>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	22fa      	movs	r2, #250	; 0xfa
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	429a      	cmp	r2, r3
 80008c6:	419b      	sbcs	r3, r3
 80008c8:	425b      	negs	r3, r3
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	701a      	strb	r2, [r3, #0]


            sensor_data[code] = adcValue;
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <read_sensors+0x7c>)
 80008d6:	1db9      	adds	r1, r7, #6
 80008d8:	7809      	ldrb	r1, [r1, #0]
 80008da:	54d1      	strb	r1, [r2, r3]

            // Small delay for stability
            DelayWithTimer(5);
 80008dc:	2005      	movs	r0, #5
 80008de:	f7ff ffbf 	bl	8000860 <DelayWithTimer>
    for (uint8_t code = 0; code < 8; code++) {
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	3201      	adds	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d9d0      	bls.n	8000896 <read_sensors+0xe>
        }
    }
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40012400 	.word	0x40012400
 8000904:	2000001c 	.word	0x2000001c

08000908 <data_process>:
uint8_t lastStateCK=0;
uint8_t lastStateDT=0;



void data_process() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
    // Attribute local names
    uint8_t data_left = sensor_data[3];
 800090e:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <data_process+0x1f0>)
 8000910:	78da      	ldrb	r2, [r3, #3]
 8000912:	1cfb      	adds	r3, r7, #3
 8000914:	701a      	strb	r2, [r3, #0]
    uint8_t data_right = sensor_data[1];
 8000916:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <data_process+0x1f0>)
 8000918:	785a      	ldrb	r2, [r3, #1]
 800091a:	1cbb      	adds	r3, r7, #2
 800091c:	701a      	strb	r2, [r3, #0]

    // PHASE 0: INIT PHASE
    if (phase == 0) {
 800091e:	4b77      	ldr	r3, [pc, #476]	; (8000afc <data_process+0x1f4>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <data_process+0x20>
 8000926:	e0bf      	b.n	8000aa8 <data_process+0x1a0>
        // Check sensors

        // Reset data array for a fresh start
        for (int i = 0; i < 16; i++) {
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	e007      	b.n	800093e <data_process+0x36>
            history[i] = 0;
 800092e:	4a74      	ldr	r2, [pc, #464]	; (8000b00 <data_process+0x1f8>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 16; i++) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3301      	adds	r3, #1
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	ddf4      	ble.n	800092e <data_process+0x26>
        }
        history_index = 0;
 8000944:	4b6f      	ldr	r3, [pc, #444]	; (8000b04 <data_process+0x1fc>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]



    	//set a CK
    	if(!CK_set){
 800094a:	4b6f      	ldr	r3, [pc, #444]	; (8000b08 <data_process+0x200>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d126      	bne.n	80009a0 <data_process+0x98>
        if (data_left == 0 && data_right == 0) return; // None high
 8000952:	1cfb      	adds	r3, r7, #3
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <data_process+0x5c>
 800095a:	1cbb      	adds	r3, r7, #2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d100      	bne.n	8000964 <data_process+0x5c>
 8000962:	e0c3      	b.n	8000aec <data_process+0x1e4>
        if (data_left == 1 && data_right == 1) return; // Both high
 8000964:	1cfb      	adds	r3, r7, #3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d104      	bne.n	8000976 <data_process+0x6e>
 800096c:	1cbb      	adds	r3, r7, #2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d100      	bne.n	8000976 <data_process+0x6e>
 8000974:	e0bc      	b.n	8000af0 <data_process+0x1e8>

        // Determine CK and DT

         CK = (data_left == 1) ? &data_left : &data_right;
 8000976:	1cfb      	adds	r3, r7, #3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d101      	bne.n	8000982 <data_process+0x7a>
 800097e:	1cfa      	adds	r2, r7, #3
 8000980:	e000      	b.n	8000984 <data_process+0x7c>
 8000982:	1cba      	adds	r2, r7, #2
 8000984:	4b61      	ldr	r3, [pc, #388]	; (8000b0c <data_process+0x204>)
 8000986:	601a      	str	r2, [r3, #0]
         DT = (data_left == 0) ? &data_left : &data_right;
 8000988:	1cfb      	adds	r3, r7, #3
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <data_process+0x8c>
 8000990:	1cfa      	adds	r2, r7, #3
 8000992:	e000      	b.n	8000996 <data_process+0x8e>
 8000994:	1cba      	adds	r2, r7, #2
 8000996:	4b5e      	ldr	r3, [pc, #376]	; (8000b10 <data_process+0x208>)
 8000998:	601a      	str	r2, [r3, #0]


        CK_set=1;
 800099a:	4b5b      	ldr	r3, [pc, #364]	; (8000b08 <data_process+0x200>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]

    	}

    	if (CK_set){
 80009a0:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <data_process+0x200>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d100      	bne.n	80009aa <data_process+0xa2>
 80009a8:	e07e      	b.n	8000aa8 <data_process+0x1a0>
    		if (count_up==0 && (*CK == 1 && *DT == 0) )
 80009aa:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <data_process+0x20c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d114      	bne.n	80009dc <data_process+0xd4>
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <data_process+0x204>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10f      	bne.n	80009dc <data_process+0xd4>
 80009bc:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <data_process+0x208>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10a      	bne.n	80009dc <data_process+0xd4>
    		{
    			count_up++;
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <data_process+0x20c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <data_process+0x20c>)
 80009d0:	701a      	strb	r2, [r3, #0]
    			Timeout(TIMEOUT_DURATION);
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <data_process+0x210>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 f90b 	bl	8000bf0 <Timeout>
    			return;
 80009da:	e08a      	b.n	8000af2 <data_process+0x1ea>

    		}
    		else if ((!checkTimeout() && count_up==1) && (*CK == 0 && *DT == 0) )
 80009dc:	f000 f91e 	bl	8000c1c <checkTimeout>
 80009e0:	0003      	movs	r3, r0
 80009e2:	001a      	movs	r2, r3
 80009e4:	2301      	movs	r3, #1
 80009e6:	4053      	eors	r3, r2
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d018      	beq.n	8000a20 <data_process+0x118>
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <data_process+0x20c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d114      	bne.n	8000a20 <data_process+0x118>
 80009f6:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <data_process+0x204>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10f      	bne.n	8000a20 <data_process+0x118>
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <data_process+0x208>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <data_process+0x118>
    		{
    			count_up++;
 8000a0a:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <data_process+0x20c>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <data_process+0x20c>)
 8000a14:	701a      	strb	r2, [r3, #0]
    			Timeout(TIMEOUT_DURATION);
 8000a16:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <data_process+0x210>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 f8e9 	bl	8000bf0 <Timeout>
    			return;
 8000a1e:	e068      	b.n	8000af2 <data_process+0x1ea>

    		}
    		else if ((!checkTimeout() && count_up==2) && (*CK == 1 && *DT == 0) )
 8000a20:	f000 f8fc 	bl	8000c1c <checkTimeout>
 8000a24:	0003      	movs	r3, r0
 8000a26:	001a      	movs	r2, r3
 8000a28:	2301      	movs	r3, #1
 8000a2a:	4053      	eors	r3, r2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d028      	beq.n	8000a84 <data_process+0x17c>
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <data_process+0x20c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d124      	bne.n	8000a84 <data_process+0x17c>
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <data_process+0x204>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d11f      	bne.n	8000a84 <data_process+0x17c>
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <data_process+0x208>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d11a      	bne.n	8000a84 <data_process+0x17c>
    		{
    			count_up++;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <data_process+0x20c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <data_process+0x20c>)
 8000a58:	701a      	strb	r2, [r3, #0]
    		    lastStateCK= *CK;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <data_process+0x204>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <data_process+0x214>)
 8000a62:	701a      	strb	r2, [r3, #0]
    			lastStateDT= *DT;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <data_process+0x208>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <data_process+0x218>)
 8000a6c:	701a      	strb	r2, [r3, #0]
    			phase++;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <data_process+0x1f4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <data_process+0x1f4>)
 8000a78:	701a      	strb	r2, [r3, #0]
    			Timeout(TIMEOUT_DURATION);
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <data_process+0x210>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 f8b7 	bl	8000bf0 <Timeout>
    			return;
 8000a82:	e036      	b.n	8000af2 <data_process+0x1ea>

    		}
    		else if (checkTimeout() || *DT == 1 ){
 8000a84:	f000 f8ca 	bl	8000c1c <checkTimeout>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d104      	bne.n	8000a96 <data_process+0x18e>
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <data_process+0x208>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d108      	bne.n	8000aa8 <data_process+0x1a0>
    		count_up=0;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <data_process+0x20c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
    		CK_set=0;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <data_process+0x200>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
    		phase=0;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <data_process+0x1f4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
    }



    // PHASE 1: READ DATA
    if (phase == 1) {
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <data_process+0x1f4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d120      	bne.n	8000af2 <data_process+0x1ea>


        if (checkTimeout()) {
 8000ab0:	f000 f8b4 	bl	8000c1c <checkTimeout>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d00c      	beq.n	8000ad2 <data_process+0x1ca>
            phase = 0; // Timeout, reset phase
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <data_process+0x1f4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
            count_up = 0;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <data_process+0x20c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
            history_index = 0;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <data_process+0x1fc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
            CK_set=0;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <data_process+0x200>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
            return;
 8000ad0:	e00f      	b.n	8000af2 <data_process+0x1ea>
        }

        if (*CK != lastStateCK) {
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <data_process+0x204>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <data_process+0x214>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d008      	beq.n	8000af2 <data_process+0x1ea>
            lastStateCK = *CK;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <data_process+0x204>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <data_process+0x214>)
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e002      	b.n	8000af2 <data_process+0x1ea>
        if (data_left == 0 && data_right == 0) return; // None high
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	e000      	b.n	8000af2 <data_process+0x1ea>
        if (data_left == 1 && data_right == 1) return; // Both high
 8000af0:	46c0      	nop			; (mov r8, r8)

    }



} //end void
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000001c 	.word	0x2000001c
 8000afc:	20000035 	.word	0x20000035
 8000b00:	20000024 	.word	0x20000024
 8000b04:	20000034 	.word	0x20000034
 8000b08:	20000038 	.word	0x20000038
 8000b0c:	2000003c 	.word	0x2000003c
 8000b10:	20000040 	.word	0x20000040
 8000b14:	20000036 	.word	0x20000036
 8000b18:	00001388 	.word	0x00001388
 8000b1c:	20000044 	.word	0x20000044
 8000b20:	20000045 	.word	0x20000045

08000b24 <ProcessCollectedData>:





void ProcessCollectedData() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
    // Check if enough data is available
    if (!enough_data) return; // Exit if no data available
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <ProcessCollectedData+0x90>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4053      	eors	r3, r2
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d139      	bne.n	8000bac <ProcessCollectedData+0x88>

    // Process the data in the history array
    for (uint8_t i = 0; i < history_index; i++) {
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e016      	b.n	8000b6e <ProcessCollectedData+0x4a>
        if (history[i] == 1) {
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <ProcessCollectedData+0x94>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d103      	bne.n	8000b54 <ProcessCollectedData+0x30>
            SetSensorRight(1); // Blink LED HIGH for "1"
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f837 	bl	8000bc0 <SetSensorRight>
 8000b52:	e002      	b.n	8000b5a <ProcessCollectedData+0x36>
        } else {
            SetSensorRight(0); // Blink LED LOW for "0"
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f833 	bl	8000bc0 <SetSensorRight>
        }

        // Delay between blinks
        DelayWithTimer(500);
 8000b5a:	23fa      	movs	r3, #250	; 0xfa
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fe7e 	bl	8000860 <DelayWithTimer>
    for (uint8_t i = 0; i < history_index; i++) {
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	3201      	adds	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <ProcessCollectedData+0x98>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d3e2      	bcc.n	8000b40 <ProcessCollectedData+0x1c>
    }

    // Reset enough_data flag and history for the next cycle
    enough_data = false;      // Data processing completed
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <ProcessCollectedData+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
    history_index = 0;        // Reset history index
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <ProcessCollectedData+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 16; i++) {
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e009      	b.n	8000ba2 <ProcessCollectedData+0x7e>
        history[i] = 0;       // Clear the history array
 8000b8e:	1dbb      	adds	r3, r7, #6
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <ProcessCollectedData+0x94>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 16; i++) {
 8000b98:	1dbb      	adds	r3, r7, #6
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	3201      	adds	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d9f1      	bls.n	8000b8e <ProcessCollectedData+0x6a>
 8000baa:	e000      	b.n	8000bae <ProcessCollectedData+0x8a>
    if (!enough_data) return; // Exit if no data available
 8000bac:	46c0      	nop			; (mov r8, r8)
    }
}
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000037 	.word	0x20000037
 8000bb8:	20000024 	.word	0x20000024
 8000bbc:	20000034 	.word	0x20000034

08000bc0 <SetSensorRight>:

    I2C_Send_Buffer(slave_address, buffer, sizeof(buffer)); // Send single value
}


void SetSensorRight(uint8_t state) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
    if (state) {
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d004      	beq.n	8000bde <SetSensorRight+0x1e>
        signal_right_GPIO_Port->BSRR = signal_right_Pin; // Set pin high
 8000bd4:	2390      	movs	r3, #144	; 0x90
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2202      	movs	r2, #2
 8000bda:	619a      	str	r2, [r3, #24]
    } else {
        signal_right_GPIO_Port->BSRR = (uint32_t)signal_right_Pin << 16U; // Reset pin low
    }
}
 8000bdc:	e004      	b.n	8000be8 <SetSensorRight+0x28>
        signal_right_GPIO_Port->BSRR = (uint32_t)signal_right_Pin << 16U; // Reset pin low
 8000bde:	2390      	movs	r3, #144	; 0x90
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0292      	lsls	r2, r2, #10
 8000be6:	619a      	str	r2, [r3, #24]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <Timeout>:





void Timeout(uint16_t timeout_ms) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dbb      	adds	r3, r7, #6
 8000bfa:	801a      	strh	r2, [r3, #0]
    TIM16->CNT = timeout_ms;    // Set the counter to the desired value
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <Timeout+0x28>)
 8000bfe:	1dba      	adds	r2, r7, #6
 8000c00:	8812      	ldrh	r2, [r2, #0]
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
    TIM16->CR1 |= TIM_CR1_CEN;  // Start the counter
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <Timeout+0x28>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <Timeout+0x28>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40014400 	.word	0x40014400

08000c1c <checkTimeout>:

void endTimeout(void) {
    TIM16->CR1 &= ~TIM_CR1_CEN; // Stop the counter
}

bool checkTimeout(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	//return false if timmer still active

    //return (TIM16->CNT == 0 && !(TIM16->CR1 & TIM_CR1_CEN)); // CNT == 0 and timer is stopped

    return false;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_IRQn 0 */

  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c6c:	f7ff fff6 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c96:	f000 f92d 	bl	8000ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff faf1 	bl	8000280 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cac:	08000f5c 	.word	0x08000f5c
  ldr r2, =_sbss
 8000cb0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cb4:	20000048 	.word	0x20000048

08000cb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_IRQHandler>

08000cba <LL_GPIO_SetPinMode>:
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	435b      	muls	r3, r3
 8000cce:	001a      	movs	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	189b      	adds	r3, r3, r2
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	400b      	ands	r3, r1
 8000cda:	001a      	movs	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	435b      	muls	r3, r3
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	434b      	muls	r3, r1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <LL_GPIO_SetPinOutputType>:
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	43d2      	mvns	r2, r2
 8000d06:	401a      	ands	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	434b      	muls	r3, r1
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	605a      	str	r2, [r3, #4]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <LL_GPIO_SetPinSpeed>:
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6899      	ldr	r1, [r3, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	435b      	muls	r3, r3
 8000d30:	001a      	movs	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	189b      	adds	r3, r3, r2
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	435b      	muls	r3, r3
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	434b      	muls	r3, r1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	609a      	str	r2, [r3, #8]
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b004      	add	sp, #16
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <LL_GPIO_SetPinPull>:
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	68d9      	ldr	r1, [r3, #12]
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	435b      	muls	r3, r3
 8000d68:	001a      	movs	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	189b      	adds	r3, r3, r2
 8000d70:	43db      	mvns	r3, r3
 8000d72:	400b      	ands	r3, r1
 8000d74:	001a      	movs	r2, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	435b      	muls	r3, r3
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	434b      	muls	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <LL_GPIO_SetAFPin_0_7>:
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6a19      	ldr	r1, [r3, #32]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	435b      	muls	r3, r3
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	4353      	muls	r3, r2
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	435a      	muls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	43db      	mvns	r3, r3
 8000db0:	400b      	ands	r3, r1
 8000db2:	001a      	movs	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	435b      	muls	r3, r3
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	434b      	muls	r3, r1
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	434b      	muls	r3, r1
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	434b      	muls	r3, r1
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	621a      	str	r2, [r3, #32]
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <LL_GPIO_SetAFPin_8_15>:
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	0a12      	lsrs	r2, r2, #8
 8000dea:	4353      	muls	r3, r2
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	0a12      	lsrs	r2, r2, #8
 8000df0:	4353      	muls	r3, r2
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	0a12      	lsrs	r2, r2, #8
 8000df6:	435a      	muls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	1a9b      	subs	r3, r3, r2
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	400b      	ands	r3, r1
 8000e02:	001a      	movs	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	0a09      	lsrs	r1, r1, #8
 8000e0c:	434b      	muls	r3, r1
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	0a09      	lsrs	r1, r1, #8
 8000e12:	434b      	muls	r3, r1
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	0a09      	lsrs	r1, r1, #8
 8000e18:	434b      	muls	r3, r1
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	434b      	muls	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b004      	add	sp, #16
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e3a:	e048      	b.n	8000ece <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d03a      	beq.n	8000ec8 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d003      	beq.n	8000e62 <LL_GPIO_Init+0x36>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d10e      	bne.n	8000e80 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff ff56 	bl	8000d1c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff ff39 	bl	8000cf2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ff63 	bl	8000d54 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d111      	bne.n	8000eba <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d807      	bhi.n	8000eac <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff71 	bl	8000d8c <LL_GPIO_SetAFPin_0_7>
 8000eaa:	e006      	b.n	8000eba <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	695a      	ldr	r2, [r3, #20]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff ff8c 	bl	8000dd2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff fef9 	bl	8000cba <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	40da      	lsrs	r2, r3
 8000ed6:	1e13      	subs	r3, r2, #0
 8000ed8:	d1b0      	bne.n	8000e3c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b004      	add	sp, #16
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <memset>:
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	1882      	adds	r2, r0, r2
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d100      	bne.n	8000eee <memset+0xa>
 8000eec:	4770      	bx	lr
 8000eee:	7019      	strb	r1, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	e7f9      	b.n	8000ee8 <memset+0x4>

08000ef4 <__libc_init_array>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4c0c      	ldr	r4, [pc, #48]	; (8000f2c <__libc_init_array+0x38>)
 8000efa:	4d0d      	ldr	r5, [pc, #52]	; (8000f30 <__libc_init_array+0x3c>)
 8000efc:	1b64      	subs	r4, r4, r5
 8000efe:	10a4      	asrs	r4, r4, #2
 8000f00:	42a6      	cmp	r6, r4
 8000f02:	d109      	bne.n	8000f18 <__libc_init_array+0x24>
 8000f04:	2600      	movs	r6, #0
 8000f06:	f000 f819 	bl	8000f3c <_init>
 8000f0a:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <__libc_init_array+0x40>)
 8000f0c:	4d0a      	ldr	r5, [pc, #40]	; (8000f38 <__libc_init_array+0x44>)
 8000f0e:	1b64      	subs	r4, r4, r5
 8000f10:	10a4      	asrs	r4, r4, #2
 8000f12:	42a6      	cmp	r6, r4
 8000f14:	d105      	bne.n	8000f22 <__libc_init_array+0x2e>
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	00b3      	lsls	r3, r6, #2
 8000f1a:	58eb      	ldr	r3, [r5, r3]
 8000f1c:	4798      	blx	r3
 8000f1e:	3601      	adds	r6, #1
 8000f20:	e7ee      	b.n	8000f00 <__libc_init_array+0xc>
 8000f22:	00b3      	lsls	r3, r6, #2
 8000f24:	58eb      	ldr	r3, [r5, r3]
 8000f26:	4798      	blx	r3
 8000f28:	3601      	adds	r6, #1
 8000f2a:	e7f2      	b.n	8000f12 <__libc_init_array+0x1e>
 8000f2c:	08000f54 	.word	0x08000f54
 8000f30:	08000f54 	.word	0x08000f54
 8000f34:	08000f58 	.word	0x08000f58
 8000f38:	08000f54 	.word	0x08000f54

08000f3c <_init>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f42:	bc08      	pop	{r3}
 8000f44:	469e      	mov	lr, r3
 8000f46:	4770      	bx	lr

08000f48 <_fini>:
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4e:	bc08      	pop	{r3}
 8000f50:	469e      	mov	lr, r3
 8000f52:	4770      	bx	lr
